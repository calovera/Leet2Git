console.log("Leet2Git extension background script loaded");async function u(){var e;const t=await chrome.storage.local.get("pending"),o=((e=t.pending)==null?void 0:e.length)>0?t.pending.length.toString():"";chrome.action.setBadgeText({text:o}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),u()});chrome.runtime.onStartup.addListener(()=>{u()});chrome.webRequest.onCompleted.addListener(async t=>{var o;if(t.method==="GET"&&t.statusCode===200)try{const e=t.url.match(/\/api\/submissions\/detail\/(\d+)/);if(!e)return;const n=e[1],c=await chrome.tabs.query({url:"https://leetcode.com/*"});if(c.length===0)return;const r=c[0].id,i=await chrome.scripting.executeScript({target:{tabId:r},func:a=>fetch(`https://leetcode.com/api/submissions/detail/${a}/`).then(s=>s.json()).catch(()=>null),args:[n]});if((o=i[0])!=null&&o.result){const a=i[0].result;a.status_display==="Accepted"&&await S(a,r)}}catch(e){console.error("Error processing submission:",e)}},{urls:["https://leetcode.com/api/submissions/detail/*"]});async function S(t,o){var e;try{const c=(e=(await chrome.scripting.executeScript({target:{tabId:o},func:()=>{var g,h,m,f;const a=document.querySelector('[data-cy="question-title"]')||document.querySelector(".css-v3d350")||document.querySelector("h1"),s=document.querySelector("[diff]")||document.querySelector(".css-dcmtd5")||document.querySelector('[class*="difficulty"]'),l=document.querySelector('[data-track-load="description_content"]')||document.querySelector(".css-1iinkds")||document.querySelector(".content__u3I1 .question-content"),y=((g=a==null?void 0:a.textContent)==null?void 0:g.trim())||"",w=((h=window.location.pathname.split("/problems/")[1])==null?void 0:h.split("/")[0])||"";let d="Medium";if(s){const p=((m=s.textContent)==null?void 0:m.toLowerCase())||"";p.includes("easy")?d="Easy":p.includes("hard")&&(d="Hard")}const b=((f=l==null?void 0:l.textContent)==null?void 0:f.trim())||"";return{title:y,slug:w,difficulty:d,description:b}}}))[0])==null?void 0:e.result;if(!c)return;const r={id:`${c.slug}-${t.lang}-${Date.now()}`,title:c.title,slug:c.slug,difficulty:c.difficulty,description:c.description,code:t.code,language:t.lang,timestamp:Date.now(),status:t.status_display,submissionId:t.id,runtime:t.runtime,memory:t.memory},{pending:i=[]}=await chrome.storage.local.get("pending");i.push({id:r.id,title:r.title,slug:r.slug,language:r.language,difficulty:r.difficulty,code:r.code,timestamp:r.timestamp,description:r.description,submissionId:r.submissionId}),await chrome.storage.local.set({pending:i}),await u(),console.log("Added solution to pending:",r.title)}catch(n){console.error("Error handling accepted submission:",n)}}chrome.runtime.onMessage.addListener((t,o,e)=>{switch(t.type){case"auth":return q(e),!0;case"push":return x(e),!0;case"getHomeData":return C(e),!0;case"solved_dom":return _(t.payload,e),!0;case"updateConfig":return I(t.payload,e),!0;default:e({error:"Unknown message type"})}});async function q(t){try{const o=await chrome.identity.launchWebAuthFlow({url:"https://github.com/login/oauth/authorize?client_id=your_client_id&scope=repo",interactive:!0});if(o){const e=new URL(o).searchParams.get("code");t(e?{success:!0,code:e}:{error:"No authorization code received"})}else t({error:"Authentication cancelled"})}catch(o){t({error:o instanceof Error?o.message:"Authentication failed"})}}async function x(t){try{const{auth:o}=await chrome.storage.local.get("auth");if(!o||!o.token){t({error:"GitHub not connected"});return}const{config:e}=await chrome.storage.local.get("config");if(!e.owner){t({error:"Repository owner not configured"});return}const{pending:n=[]}=await chrome.storage.local.get("pending");if(n.length===0){t({error:"No pending solutions"});return}t({success:!0})}catch(o){t({error:o.message})}}async function C(t){try{const[o,e,n,c]=await Promise.all([chrome.storage.local.get("stats"),chrome.storage.local.get("pending"),chrome.storage.local.get("auth"),chrome.storage.local.get("config")]);t({stats:o.stats||{},pending:e.pending||[],auth:n.auth||null,config:c.config||{}})}catch(o){t({error:o.message})}}async function _(t,o){try{const{pending:e=[]}=await chrome.storage.local.get("pending");e.push(t),await chrome.storage.local.set({pending:e}),await u(),o({success:!0})}catch(e){o({error:e.message})}}async function I(t,o){try{await chrome.storage.local.set({config:t}),o({success:!0})}catch(e){o({error:e.message})}}
