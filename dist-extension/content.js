console.log("[Leet2Git] Content script loaded");const p=window.fetch;window.fetch=async function(...e){var t,c,a,i;const o=await p.apply(this,e);if((c=(t=e[0])==null?void 0:t.includes)!=null&&c.call(t,"/graphql")||typeof e[0]=="object"&&((a=e[0].url)!=null&&a.includes("/graphql"))){const n=o.clone();try{const l=await n.json();if((i=l==null?void 0:l.data)!=null&&i.question){const s=l.data.question;chrome.runtime.sendMessage({type:"graphql_question_data",payload:{slug:s.titleSlug,title:s.title,difficulty:s.difficulty,topicTags:s.topicTags,categoryTitle:s.categoryTitle}}),console.log("[Leet2Git] Captured question metadata:",s.titleSlug)}}catch{}}return o};const u=XMLHttpRequest.prototype.open,r=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.open=function(e,o,...t){return this._url=o,this._method=e,u.apply(this,[e,o,...t])};XMLHttpRequest.prototype.send=function(e){var o;if((o=this._url)!=null&&o.includes("/graphql")&&this._method==="POST"){const t=this.onload;this.onload=function(c){var a;try{const i=JSON.parse(this.responseText);if((a=i==null?void 0:i.data)!=null&&a.question){const n=i.data.question;chrome.runtime.sendMessage({type:"graphql_question_data",payload:{slug:n.titleSlug,title:n.title,difficulty:n.difficulty,topicTags:n.topicTags,categoryTitle:n.categoryTitle}}),console.log("[Leet2Git] Captured question metadata via XHR:",n.titleSlug)}}catch{}t&&t.apply(this,arguments)}}return r.apply(this,arguments)};
