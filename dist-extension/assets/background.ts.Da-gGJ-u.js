console.log("Leet2Git background script loaded");const p=new Map,L=new Map,g=new Map,$=new Map;function T(e){L.set(e.slug,e),console.log(`[Leet2Git] Question meta cached: ${e.slug}`)}function k(e){return L.get(e)||null}function v(e){return e.split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join("")}async function h(){try{const e=await chrome.storage.sync.get(["pending","auth"]),t=e.pending||[],o=e.auth;if(o&&o.connected){const s=t.length>0?t.length.toString():"";chrome.action.setBadgeText({text:s}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(e){console.error("Error updating badge:",e)}}chrome.webRequest.onBeforeRequest.addListener(e=>{if(e.method==="POST"&&e.requestBody&&e.requestBody.raw)try{const t=e.requestBody.raw[0].bytes,s=new TextDecoder().decode(t),n=JSON.parse(s);if(n.typed_code&&n.lang&&n.question_id){const r={code:n.typed_code,lang:n.lang,question_id:n.question_id,timestamp:Date.now()};g.set(n.question_id,r),console.log(`[Leet2Git] Code captured for question ${n.question_id}`)}}catch(t){console.error("[Leet2Git] Failed to parse submit request:",t)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((e,t,o)=>{if(t.url&&o.url&&o.url.includes("leetcode.com/problems/")){const s=o.url.match(/\/problems\/([^\/]+)/);if(s){const n=s[1];p.set(e,{slug:n,metadata:k(n),submissionCode:null}),console.log(`[Leet2Git] Tab ${e} navigated to problem: ${n}`)}}});chrome.tabs.onRemoved.addListener(e=>{p.delete(e),console.log(`[Leet2Git] Cleaned up data for closed tab ${e}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),h()});chrome.runtime.onStartup.addListener(()=>{h()});chrome.webRequest.onCompleted.addListener(async e=>{if(e.statusCode!==200||!e.tabId)return;const t=e.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!t)return;const o=t[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`),setTimeout(async()=>{try{let s=null,n=null;for(const[r,a]of g.entries())if(a&&a.timestamp>Date.now()-3e5){s=a,n=r;break}if(!s){console.log(`[Leet2Git] No recent code found for submission ${o}`);return}try{const r=await fetch(e.url,{method:"GET",credentials:"include"});if(r.ok){const a=await r.text();let c;try{c=JSON.parse(a)}catch{if(a.includes('"status_msg":"Accepted"')||a.includes("Accepted")&&!a.includes("Wrong Answer")&&!a.includes("Time Limit Exceeded"))c={status_msg:"Accepted"};else{console.log(`[Leet2Git] Submission ${o} not accepted`);return}}c&&c.status_msg==="Accepted"?(console.log(`[Leet2Git] Submission ${o} confirmed accepted`),await m(o,e.tabId,c)):console.log(`[Leet2Git] Submission ${o} status: ${(c==null?void 0:c.status_msg)||"unknown"}`)}else console.log(`[Leet2Git] Could not fetch submission result: ${r.status}`)}catch(r){console.log(`[Leet2Git] Fetch error, assuming accepted for recent code: ${r.message}`),await m(o,e.tabId,null)}}catch(s){console.error("[Leet2Git] Error processing submission:",s)}},3e3)},{urls:["https://leetcode.com/submissions/detail/*/check/"]});async function m(e,t,o=null){try{console.log(`[Leet2Git] Processing accepted submission: ${e}`);let s=null,n=null;for(const[G,w]of g.entries())if(w.timestamp>Date.now()-6e5){s=w,n=G;break}if(!s){console.warn(`[Leet2Git] No recent code record found for submission ${e}`);return}const r=p.get(t);if(!r||!r.slug){console.warn(`[Leet2Git] No tab info found for submission ${e}`);return}const a=k(r.slug);let c="Algorithms";a!=null&&a.topicTags&&Array.isArray(a.topicTags)&&a.topicTags.length>0?(c=a.topicTags[0].name,console.log(`[Leet2Git] Using topicTag: ${c}`)):a!=null&&a.categoryTitle&&(c=a.categoryTitle,console.log(`[Leet2Git] Using categoryTitle as fallback: ${c}`));const i={id:`${r.slug}-${Date.now()}`,submissionId:e,title:(a==null?void 0:a.title)||v(r.slug),slug:r.slug,difficulty:(a==null?void 0:a.difficulty)||"Easy",tag:c,code:s.code,language:s.lang,runtime:"N/A",memory:"N/A",timestamp:Date.now()};g.delete(n);const d=await chrome.storage.sync.get(["pending","solvedSlugs"]),u=d.pending||[],l=new Set(d.solvedSlugs||[]),f=`${r.slug}-${s.lang}`,y=Date.now(),b=$.get(f);if(b&&y-b<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}u.push(i),$.set(f,y),l.has(r.slug)?console.log(`[Leet2Git] Problem already solved, stats unchanged: ${r.slug}`):(l.add(r.slug),await A(i),console.log(`[Leet2Git] Updated stats for new problem: ${r.slug}`)),await chrome.storage.sync.set({pending:u,solvedSlugs:Array.from(l)}),await h(),console.log(`[Leet2Git] Successfully captured: ${i.title} (${s.lang})`)}catch(s){console.error("[Leet2Git] Error processing submission:",s)}}async function A(e){try{const{stats:t={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=e.difficulty.toLowerCase();t.counts[o]!==void 0&&(t.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${t.counts[o]}`)),t.recentSolves.unshift({id:e.id,title:e.title,language:e.language,difficulty:e.difficulty,timestamp:e.timestamp}),t.recentSolves=t.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:t}),console.log(`[Leet2Git] Stats updated for ${e.title}`)}catch(t){console.error("Error updating stats:",t)}}async function S(e,t){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){t({success:!1,error:"Invalid GitHub token"});return}const s=await o.json(),n={token:e,username:s.login,email:s.email||"",connected:!0};await chrome.storage.sync.set({auth:n}),t({success:!0,username:s.login,auth:n})}catch(o){console.error("Error verifying GitHub token:",o),t({success:!1,error:"Failed to verify token"})}}async function q(e){try{const t=await chrome.storage.sync.get(["auth"]);e({success:!0,auth:t.auth||null})}catch(t){console.error("Error handling auth:",t),e({success:!1,error:t.message})}}async function C(e){try{const t=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:t.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:t.pending||[],auth:t.auth||null,config:t.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};e({success:!0,data:o})}catch(t){console.error("Error getting home data:",t),e({success:!1,error:t.message})}}async function D(e,t){try{await chrome.storage.sync.set({config:e}),t({success:!0})}catch(o){console.error("Error updating config:",o),t({success:!1,error:o.message})}}async function x(e){try{const t=await chrome.storage.sync.get(["pending","auth","config"]),o=t.pending||[];if(o.length===0){e({success:!1,error:"No pending solutions to push"});return}const s=t.auth;if(!s||!s.token){e({success:!1,error:"GitHub authentication required"});return}const n=t.config||{owner:s.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await E(s.token,n);let r=0;const a=[];for(const c of o)try{await j(c,s,n),r++,a.push({success:!0,title:c.title})}catch(i){console.error(`Failed to push ${c.title}:`,i),a.push({success:!1,title:c.title,error:i.message})}await chrome.storage.sync.set({pending:[]}),await h(),e({success:!0,count:r,results:a,message:`Pushed ${r}/${o.length} solutions`})}catch(t){console.error("Error handling push:",t),e({success:!1,error:t.message})}}async function E(e,t){const o=`https://api.github.com/repos/${t.owner}/${t.repo}`;try{const s=await fetch(o,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(s.ok){console.log(`Repository ${t.owner}/${t.repo} exists`);return}if(s.status===404){console.log(`Creating repository ${t.owner}/${t.repo}`);const n=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:t.repo,description:"LeetCode solutions managed by Leet2Git extension",private:t.private||!1,auto_init:!0})});if(!n.ok){const r=await n.json();throw new Error(`Failed to create repository: ${r.message}`)}console.log(`Repository ${t.owner}/${t.repo} created successfully`)}else throw new Error(`Failed to check repository: ${s.statusText}`)}catch(s){throw console.error("Repository check/creation error:",s),s}}async function j(e,t,o){const s=_(e),n=I(e,o),r=U(e);return console.log(`Pushing to GitHub: ${n}/${s}`),await F({token:t.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${n}/${s}`,content:r,message:`Add solution: ${e.title}`})}function _(e){const t=P(e.language);return`${e.title.replace(/[^a-zA-Z0-9]/g,"")}.${t}`}function I(e,t){switch(t.folderStructure){case"difficulty":return e.difficulty;case"topic":return e.tag||"Algorithms";case"flat":default:return"."}}function U(e,t){let o="";return o+=`/*
 * @lc app=leetcode id=${e.submissionId} lang=${e.language}
 *
 * ${e.title}
 * 
 * Difficulty: ${e.difficulty}
 * Category: ${e.tag}
 * Runtime: ${e.runtime}
 * Memory: ${e.memory}
 */

`,o+=e.code,o}function P(e){const t={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(e||"").toLowerCase().trim();return t[o]||"py"}async function F({token:e,owner:t,repo:o,branch:s,path:n,content:r,message:a}){const c=`https://api.github.com/repos/${t}/${o}/contents/${n}`;let i=null;try{const l=await fetch(c,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});l.ok&&(i=(await l.json()).sha)}catch{}const d={message:a||`Update ${n}`,content:btoa(unescape(encodeURIComponent(r))),branch:s};i&&(d.sha=i);const u=await fetch(c,{method:"PUT",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(d)});if(!u.ok){const l=await u.json();throw new Error(`GitHub API error: ${l.message||u.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((e,t,o)=>{var s,n;switch(e.type){case"graphql_question_data":const r={slug:e.data.slug,title:e.data.title,difficulty:e.data.difficulty,tag:e.data.topicTags&&Array.isArray(e.data.topicTags)&&e.data.topicTags.length>0?e.data.topicTags[0].name:e.data.categoryTitle||"Algorithms",categoryTitle:e.data.categoryTitle,topicTags:e.data.topicTags};if(T(r),(s=t.tab)!=null&&s.id){const a=p.get(t.tab.id);a&&a.slug===r.slug&&(a.metadata=r,console.log(`[Leet2Git] Updated metadata for tab ${t.tab.id}: ${r.title}`))}o({success:!0});break;case"submission_accepted":m(e.submissionId,e.tabId||((n=t.tab)==null?void 0:n.id)),o({success:!0});break;case"auth":e.data&&e.data.token?S(e.data.token,o):q(o);break;case"push":x(o);break;case"getHomeData":C(o);break;case"updateConfig":D(e.payload,o);break;default:console.warn("Unknown message type:",e.type)}return!0});
