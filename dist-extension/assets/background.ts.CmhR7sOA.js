console.log("Leet2Git background script loaded");const h=new Map,G=new Map,p=new Map,L=new Map;function v(e){G.set(e.slug,e),console.log(`[Leet2Git] Question meta cached: ${e.slug}`)}function k(e){return G.get(e)||null}function T(e){return e.split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join("")}async function f(){try{const e=await chrome.storage.sync.get(["pending","auth"]),t=e.pending||[],o=e.auth;if(o&&o.connected){const r=t.length>0?t.length.toString():"";chrome.action.setBadgeText({text:r}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(e){console.error("Error updating badge:",e)}}chrome.webRequest.onBeforeRequest.addListener(e=>{if(e.method==="POST"&&e.requestBody&&e.requestBody.raw)try{const t=e.requestBody.raw[0].bytes,r=new TextDecoder().decode(t),s=JSON.parse(r);if(s.typed_code&&s.lang&&s.question_id){const c={code:s.typed_code,lang:s.lang,question_id:s.question_id,timestamp:Date.now()};p.set(s.question_id,c),console.log(`[Leet2Git] Code captured for question ${s.question_id}`)}}catch(t){console.error("[Leet2Git] Failed to parse submit request:",t)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((e,t,o)=>{if(t.url&&o.url&&o.url.includes("leetcode.com/problems/")){const r=o.url.match(/\/problems\/([^\/]+)/);if(r){const s=r[1];h.set(e,{slug:s,metadata:k(s),submissionCode:null}),console.log(`[Leet2Git] Tab ${e} navigated to problem: ${s}`)}}});chrome.tabs.onRemoved.addListener(e=>{h.delete(e),console.log(`[Leet2Git] Cleaned up data for closed tab ${e}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),f()});chrome.runtime.onStartup.addListener(()=>{f()});chrome.webRequest.onCompleted.addListener(async e=>{if(e.statusCode!==200||!e.tabId)return;const t=e.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!t)return;const o=t[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`),setTimeout(async()=>{try{let r=null,s=null;for(const[c,a]of p.entries())if(a&&a.timestamp>Date.now()-3e5){r=a,s=c;break}if(!r){console.log(`[Leet2Git] No recent code found for submission ${o}`);return}try{const c=await fetch(e.url,{method:"GET",credentials:"include"});if(c.ok){const a=await c.text();let n;try{n=JSON.parse(a)}catch{if(a.includes('"status_msg":"Accepted"')||a.includes("Accepted")&&!a.includes("Wrong Answer")&&!a.includes("Time Limit Exceeded"))n={status_msg:"Accepted"};else{console.log(`[Leet2Git] Submission ${o} not accepted`);return}}n&&n.status_msg==="Accepted"?(console.log(`[Leet2Git] Submission ${o} confirmed accepted`),await m(o,e.tabId,n)):console.log(`[Leet2Git] Submission ${o} status: ${(n==null?void 0:n.status_msg)||"unknown"}`)}else console.log(`[Leet2Git] Could not fetch submission result: ${c.status}`)}catch(c){console.log(`[Leet2Git] Fetch error, assuming accepted for recent code: ${c.message}`),await m(o,e.tabId,null)}}catch(r){console.error("[Leet2Git] Error processing submission:",r)}},3e3)},{urls:["https://leetcode.com/submissions/detail/*/check/"]});async function m(e,t,o=null){var r;try{console.log(`[Leet2Git] Processing accepted submission: ${e}`);let s=null,c=null;for(const[S,$]of p.entries())if($.timestamp>Date.now()-6e5){s=$,c=S;break}if(!s){console.warn(`[Leet2Git] No recent code record found for submission ${e}`);return}const a=h.get(t);if(!a||!a.slug){console.warn(`[Leet2Git] No tab info found for submission ${e}`);return}const n=k(a.slug);let i="Algorithms";n!=null&&n.topicTags&&Array.isArray(n.topicTags)&&n.topicTags.length>0&&((r=n.topicTags[0])!=null&&r.name)?(i=n.topicTags[0].name,console.log(`[Leet2Git] Using topicTag: ${i}`)):n!=null&&n.categoryTitle?(i=n.categoryTitle,console.log(`[Leet2Git] Using categoryTitle as fallback: ${i}`)):console.log(`[Leet2Git] Using default tag: ${i}`);const u={id:`${a.slug}-${Date.now()}`,submissionId:e,title:(n==null?void 0:n.title)||T(a.slug),slug:a.slug,difficulty:(n==null?void 0:n.difficulty)||"Easy",tag:i,code:s.code,language:s.lang,runtime:"N/A",memory:"N/A",timestamp:Date.now()};console.log(`[Leet2Git] Solution payload created with tag: ${i} for ${a.slug}`),p.delete(c);const d=await chrome.storage.sync.get(["pending","solvedSlugs"]),l=d.pending||[],g=new Set(d.solvedSlugs||[]),y=`${a.slug}-${s.lang}`,b=Date.now(),w=L.get(y);if(w&&b-w<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}l.push(u),L.set(y,b),g.has(a.slug)?console.log(`[Leet2Git] Problem already solved in different language, allowing upload but not updating stats: ${a.slug}`):(g.add(a.slug),await A(u),console.log(`[Leet2Git] Updated stats for new problem: ${a.slug}`)),await chrome.storage.sync.set({pending:l,solvedSlugs:Array.from(g)}),await f(),console.log(`[Leet2Git] Successfully captured: ${u.title} (${s.lang})`)}catch(s){console.error("[Leet2Git] Error processing submission:",s)}}async function A(e){try{const{stats:t={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=e.difficulty.toLowerCase();t.counts[o]!==void 0&&(t.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${t.counts[o]}`)),t.recentSolves.unshift({id:e.id,title:e.title,language:e.language,difficulty:e.difficulty,timestamp:e.timestamp}),t.recentSolves=t.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:t}),console.log(`[Leet2Git] Stats updated for ${e.title}`)}catch(t){console.error("Error updating stats:",t)}}async function q(e,t){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){t({success:!1,error:"Invalid GitHub token"});return}const r=await o.json(),s={token:e,username:r.login,email:r.email||"",connected:!0};await chrome.storage.sync.set({auth:s}),t({success:!0,username:r.login,auth:s})}catch(o){console.error("Error verifying GitHub token:",o),t({success:!1,error:"Failed to verify token"})}}async function C(e){try{const t=await chrome.storage.sync.get(["auth"]);e({success:!0,auth:t.auth||null})}catch(t){console.error("Error handling auth:",t),e({success:!1,error:t.message})}}async function D(e){try{const t=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:t.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:t.pending||[],auth:t.auth||null,config:t.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};e({success:!0,data:o})}catch(t){console.error("Error getting home data:",t),e({success:!1,error:t.message})}}async function x(e,t){try{await chrome.storage.sync.set({config:e}),t({success:!0})}catch(o){console.error("Error updating config:",o),t({success:!1,error:o.message})}}async function E(e){try{const t=await chrome.storage.sync.get(["pending","auth","config"]),o=t.pending||[];if(o.length===0){e({success:!1,error:"No pending solutions to push"});return}const r=t.auth;if(!r||!r.token){e({success:!1,error:"GitHub authentication required"});return}const s=t.config||{owner:r.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await U(r.token,s);let c=0;const a=[];for(const n of o)try{await j(n,r,s),c++,a.push({success:!0,title:n.title})}catch(i){console.error(`Failed to push ${n.title}:`,i),a.push({success:!1,title:n.title,error:i.message})}await chrome.storage.sync.set({pending:[]}),await f(),e({success:!0,count:c,results:a,message:`Pushed ${c}/${o.length} solutions`})}catch(t){console.error("Error handling push:",t),e({success:!1,error:t.message})}}async function U(e,t){const o=`https://api.github.com/repos/${t.owner}/${t.repo}`;try{const r=await fetch(o,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(r.ok){console.log(`Repository ${t.owner}/${t.repo} exists`);return}if(r.status===404){console.log(`Creating repository ${t.owner}/${t.repo}`);const s=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:t.repo,description:"LeetCode solutions managed by Leet2Git extension",private:t.private||!1,auto_init:!0})});if(!s.ok){const c=await s.json();throw new Error(`Failed to create repository: ${c.message}`)}console.log(`Repository ${t.owner}/${t.repo} created successfully`)}else throw new Error(`Failed to check repository: ${r.statusText}`)}catch(r){throw console.error("Repository check/creation error:",r),r}}async function j(e,t,o){const r=_(e),s=I(e,o),c=P(e);return console.log(`Pushing to GitHub: ${s}/${r}`),await M({token:t.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${s}/${r}`,content:c,message:`Add solution: ${e.title}`})}function _(e){const t=F(e.language);return`${e.title.replace(/[^a-zA-Z0-9]/g,"")}.${t}`}function I(e,t){switch(console.log(`[Leet2Git] Generating file path for ${e.title} with tag: ${e.tag}, folderStructure: ${t.folderStructure}`),t.folderStructure){case"difficulty":return console.log(`[Leet2Git] Using difficulty folder: ${e.difficulty}`),e.difficulty;case"topic":const o=e.tag||"Algorithms";return console.log(`[Leet2Git] Using topic folder: ${o}`),o;case"flat":default:return console.log("[Leet2Git] Using flat structure"),"."}}function P(e,t){let o="";return o+=`/*
 * @lc app=leetcode id=${e.submissionId} lang=${e.language}
 *
 * ${e.title}
 * 
 * Difficulty: ${e.difficulty}
 * Category: ${e.tag}
 * Runtime: ${e.runtime}
 * Memory: ${e.memory}
 */

`,o+=e.code,o}function F(e){const t={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(e||"").toLowerCase().trim();return t[o]||"py"}async function M({token:e,owner:t,repo:o,branch:r,path:s,content:c,message:a}){const n=`https://api.github.com/repos/${t}/${o}/contents/${s}`;let i=null;try{const l=await fetch(n,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});l.ok&&(i=(await l.json()).sha)}catch{}const u={message:a||`Update ${s}`,content:btoa(unescape(encodeURIComponent(c))),branch:r};i&&(u.sha=i);const d=await fetch(n,{method:"PUT",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(u)});if(!d.ok){const l=await d.json();throw new Error(`GitHub API error: ${l.message||d.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((e,t,o)=>{var r,s;switch(e.type){case"graphql_question_data":const c={slug:e.data.slug,title:e.data.title,difficulty:e.data.difficulty,categoryTitle:e.data.categoryTitle,topicTags:e.data.topicTags};if(v(c),(r=t.tab)!=null&&r.id){const a=h.get(t.tab.id);a&&a.slug===c.slug&&(a.metadata=c,console.log(`[Leet2Git] Updated metadata for tab ${t.tab.id}: ${c.title}`))}o({success:!0});break;case"submission_accepted":m(e.submissionId,e.tabId||((s=t.tab)==null?void 0:s.id)),o({success:!0});break;case"auth":e.data&&e.data.token?q(e.data.token,o):C(o);break;case"push":E(o);break;case"getHomeData":D(o);break;case"updateConfig":x(e.payload,o);break;default:console.warn("Unknown message type:",e.type)}return!0});
