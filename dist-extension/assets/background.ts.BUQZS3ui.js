console.log("Leet2Git background script loaded");const p=new Map,S=new Map,m=new Map,L=new Map;function G(e){S.set(e.slug,e),console.log(`[Leet2Git] Question meta cached: ${e.slug}`)}function k(e){return S.get(e)||null}function q(e){return e.split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join("")}async function h(){try{const e=await chrome.storage.sync.get(["pending","auth"]),t=e.pending||[],o=e.auth;if(o&&o.connected){const r=t.length>0?t.length.toString():"";chrome.action.setBadgeText({text:r}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(e){console.error("Error updating badge:",e)}}chrome.webRequest.onBeforeRequest.addListener(e=>{if(e.method==="POST"&&e.requestBody&&e.requestBody.raw)try{const t=e.requestBody.raw[0].bytes,r=new TextDecoder().decode(t),s=JSON.parse(r);if(s.typed_code&&s.lang&&s.question_id){const a={code:s.typed_code,lang:s.lang,question_id:s.question_id,timestamp:Date.now()};m.set(s.question_id,a),console.log(`[Leet2Git] Code captured for question ${s.question_id}`)}}catch(t){console.error("[Leet2Git] Failed to parse submit request:",t)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((e,t,o)=>{if(t.url&&o.url&&o.url.includes("leetcode.com/problems/")){const r=o.url.match(/\/problems\/([^\/]+)/);if(r){const s=r[1];p.set(e,{slug:s,metadata:k(s),submissionCode:null}),console.log(`[Leet2Git] Tab ${e} navigated to problem: ${s}`)}}});chrome.tabs.onRemoved.addListener(e=>{p.delete(e),console.log(`[Leet2Git] Cleaned up data for closed tab ${e}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),h()});chrome.runtime.onStartup.addListener(()=>{h()});chrome.webRequest.onCompleted.addListener(async e=>{var r,s;if(e.statusCode!==200||!e.tabId)return;const t=e.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!t)return;const o=t[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`);try{const a=await fetch(e.url,{credentials:"include",headers:{Accept:"application/json"}});if(!a.ok)return;const n=await a.json();if(n.status_msg!=="Accepted"){console.log(`[Leet2Git] Submission not accepted: ${n.status_msg}`);return}const i=n.question_id||n.id,l=m.get(i);if(!l){console.warn(`[Leet2Git] No code record found for question ${i}`);return}const d=p.get(e.tabId),u=(d==null?void 0:d.slug)||A(n);if(!u){console.warn("[Leet2Git] Could not determine problem slug");return}const c=k(u),g={id:`${u}-${Date.now()}`,submissionId:o,title:(c==null?void 0:c.title)||q(u),slug:u,difficulty:(c==null?void 0:c.difficulty)||"Easy",tag:((s=(r=c==null?void 0:c.topicTags)==null?void 0:r[0])==null?void 0:s.name)||(c==null?void 0:c.categoryTitle)||"Algorithms",code:l.code,language:l.lang,runtime:n.display_runtime||"N/A",memory:n.status_memory||"N/A",timestamp:Date.now()};m.delete(i);const y=await chrome.storage.sync.get(["pending","solvedSlugs"]),w=y.pending||[],f=new Set(y.solvedSlugs||[]),b=`${u}-${l.lang}`,$=Date.now(),v=L.get(b);if(v&&$-v<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}w.push(g),L.set(b,$),f.has(u)?console.log(`[Leet2Git] Problem already solved, stats unchanged: ${u}`):(f.add(u),await C(g),console.log(`[Leet2Git] Updated stats for new problem: ${u}`)),await chrome.storage.sync.set({pending:w,solvedSlugs:Array.from(f)}),await h(),console.log(`[Leet2Git] Successfully captured: ${g.title} (${l.lang})`)}catch(a){console.error("[Leet2Git] Error processing submission:",a)}},{urls:["https://leetcode.com/submissions/detail/*/check/"]});function A(e){return e.titleSlug||e.question_slug||null}async function C(e){try{const{stats:t={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=e.difficulty.toLowerCase();t.counts[o]!==void 0&&(t.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${t.counts[o]}`)),t.recentSolves.unshift({id:e.id,title:e.title,language:e.language,difficulty:e.difficulty,timestamp:e.timestamp}),t.recentSolves=t.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:t}),console.log(`[Leet2Git] Stats updated for ${e.title}`)}catch(t){console.error("Error updating stats:",t)}}async function T(e,t){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){t({success:!1,error:"Invalid GitHub token"});return}const r=await o.json(),s={token:e,username:r.login,email:r.email||"",connected:!0};await chrome.storage.sync.set({auth:s}),t({success:!0,username:r.login,auth:s})}catch(o){console.error("Error verifying GitHub token:",o),t({success:!1,error:"Failed to verify token"})}}async function D(e){try{const t=await chrome.storage.sync.get(["auth"]);e({success:!0,auth:t.auth||null})}catch(t){console.error("Error handling auth:",t),e({success:!1,error:t.message})}}async function j(e){try{const t=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:t.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:t.pending||[],auth:t.auth||null,config:t.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};e({success:!0,data:o})}catch(t){console.error("Error getting home data:",t),e({success:!1,error:t.message})}}async function x(e,t){try{await chrome.storage.sync.set({config:e}),t({success:!0})}catch(o){console.error("Error updating config:",o),t({success:!1,error:o.message})}}async function B(e){try{const t=await chrome.storage.sync.get(["pending","auth","config"]),o=t.pending||[];if(o.length===0){e({success:!1,error:"No pending solutions to push"});return}const r=t.auth;if(!r||!r.token){e({success:!1,error:"GitHub authentication required"});return}const s=t.config||{owner:r.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await _(r.token,s);let a=0;const n=[];for(const i of o)try{await E(i,r,s),a++,n.push({success:!0,title:i.title})}catch(l){console.error(`Failed to push ${i.title}:`,l),n.push({success:!1,title:i.title,error:l.message})}await chrome.storage.sync.set({pending:[]}),await h(),e({success:!0,count:a,results:n,message:`Pushed ${a}/${o.length} solutions`})}catch(t){console.error("Error handling push:",t),e({success:!1,error:t.message})}}async function _(e,t){const o=`https://api.github.com/repos/${t.owner}/${t.repo}`;try{const r=await fetch(o,{headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json"}});if(r.ok){console.log(`Repository ${t.owner}/${t.repo} exists`);return}if(r.status===404){console.log(`Creating repository ${t.owner}/${t.repo}`);const s=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:t.repo,description:"LeetCode solutions managed by Leet2Git extension",private:t.private||!1,auto_init:!0})});if(!s.ok){const a=await s.json();throw new Error(`Failed to create repository: ${a.message}`)}console.log(`Repository ${t.owner}/${t.repo} created successfully`)}else throw new Error(`Failed to check repository: ${r.statusText}`)}catch(r){throw console.error("Repository check/creation error:",r),r}}async function E(e,t,o){const r=F(e),s=P(e,o),a=M(e);return console.log(`Pushing to GitHub: ${s}/${r}`),await I({token:t.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${s}/${r}`,content:a,message:`Add solution: ${e.title}`})}function F(e){const t=U(e.language);return`${e.title.replace(/[^a-zA-Z0-9]/g,"")}.${t}`}function P(e,t){switch(t.folderStructure){case"difficulty":return e.difficulty;case"topic":return e.tag||"Algorithms";case"flat":default:return"."}}function M(e,t){let o="";return o+=`/*
 * @lc app=leetcode id=${e.submissionId} lang=${e.language}
 *
 * ${e.title}
 * 
 * Difficulty: ${e.difficulty}
 * Category: ${e.tag}
 * Runtime: ${e.runtime}
 * Memory: ${e.memory}
 */

`,o+=e.code,o}function U(e){const t={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(e||"").toLowerCase().trim();return t[o]||"py"}async function I({token:e,owner:t,repo:o,branch:r,path:s,content:a,message:n}){const i=`https://api.github.com/repos/${t}/${o}/contents/${s}`;let l=null;try{const c=await fetch(i,{headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json"}});c.ok&&(l=(await c.json()).sha)}catch{}const d={message:n||`Update ${s}`,content:btoa(unescape(encodeURIComponent(a))),branch:r};l&&(d.sha=l);const u=await fetch(i,{method:"PUT",headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(d)});if(!u.ok){const c=await u.json();throw new Error(`GitHub API error: ${c.message||u.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((e,t,o)=>{var r,s,a;switch(e.type){case"graphql_question_data":const n={slug:e.data.slug,title:e.data.title,difficulty:e.data.difficulty,tag:((s=(r=e.data.topicTags)==null?void 0:r[0])==null?void 0:s.name)||e.data.categoryTitle||"Algorithms",categoryTitle:e.data.categoryTitle,topicTags:e.data.topicTags};if(G(n),(a=t.tab)!=null&&a.id){const i=p.get(t.tab.id);i&&i.slug===n.slug&&(i.metadata=n,console.log(`[Leet2Git] Updated metadata for tab ${t.tab.id}: ${n.title}`))}o({success:!0});break;case"auth":e.data&&e.data.token?T(e.data.token,o):D(o);break;case"push":B(o);break;case"getHomeData":j(o);break;case"updateConfig":x(e.payload,o);break;default:console.warn("Unknown message type:",e.type)}return!0});
