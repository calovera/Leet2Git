console.log("Leet2Git content script loaded");(function(){const i=window.fetch;window.fetch=function(a,e){const c=typeof a=="string"?a:a instanceof URL?a.href:a.url;if(c.includes("/graphql")&&(e==null?void 0:e.method)==="POST"){if(console.log("[Leet2Git] GraphQL POST request detected to:",c),e.body)try{const s=typeof e.body=="string"?e.body:new TextDecoder().decode(e.body);console.log("[Leet2Git] GraphQL request body:",s),(s.includes("questionDetail")||s.includes("topicTags"))&&console.log("[Leet2Git] Found questionDetail query with topicTags!")}catch(s){console.log("[Leet2Git] Could not decode request body:",s)}return i.call(this,a,e).then(async s=>{var l,o,n;if(s.ok&&((l=s.headers.get("content-type"))!=null&&l.includes("application/json")))try{const t=await s.clone().json();if(console.log("[Leet2Git] GraphQL response data:",t),(o=t==null?void 0:t.data)!=null&&o.question&&t.data.question.topicTags){const r={slug:t.data.question.titleSlug,title:t.data.question.title,difficulty:t.data.question.difficulty,categoryTitle:t.data.question.categoryTitle,topicTags:t.data.question.topicTags};console.log("[Leet2Git] SUCCESS! Question data with topicTags extracted:",r),console.log("[Leet2Git] TopicTags found:",r.topicTags),console.log("[Leet2Git] First topicTag name:",(n=r.topicTags[0])==null?void 0:n.name),chrome.runtime.sendMessage({type:"graphql_question_data",data:r},u=>{console.log("[Leet2Git] Background response:",u)})}else console.log("[Leet2Git] GraphQL response does not contain question with topicTags")}catch(d){console.error("[Leet2Git] Error processing GraphQL response:",d)}return s})}return i.call(this,a,e)}})();function g(){var i,a;try{const e=document.querySelectorAll("script");for(const c of e){const s=c.textContent||"";if(s.includes("questionId")&&s.includes("topicTags")){console.log("[Leet2Git] Found question data in DOM script");const l=s.match(/window\.__INITIAL_STATE__\s*=\s*({.+?});/);if(l)try{const o=JSON.parse(l[1]);console.log("[Leet2Git] Initial state extracted:",o);const n=((i=o==null?void 0:o.questionDetail)==null?void 0:i.question)||(o==null?void 0:o.question)||((a=o==null?void 0:o.data)==null?void 0:a.question);if(n&&n.titleSlug){const d={slug:n.titleSlug,title:n.title,difficulty:n.difficulty,categoryTitle:n.categoryTitle,topicTags:n.topicTags||[]};console.log("[Leet2Git] Question data from DOM:",d),chrome.runtime.sendMessage({type:"graphql_question_data",data:d})}}catch(o){console.log("[Leet2Git] Failed to parse initial state:",o)}}}}catch(e){console.error("[Leet2Git] Error extracting from DOM:",e)}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",g):g();let p=location.href;new MutationObserver(()=>{const i=location.href;i!==p&&(p=i,i.includes("/problems/")&&(console.log("[Leet2Git] URL changed to problem page:",i),setTimeout(g,1e3)))}).observe(document,{subtree:!0,childList:!0});(function(){const i=XMLHttpRequest.prototype.open,a=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.open=function(e,c,...s){return this._method=e,this._url=typeof c=="string"?c:c.href,i.apply(this,[e,c,...s])},XMLHttpRequest.prototype.send=function(e){var c;if(this._method==="POST"&&((c=this._url)!=null&&c.includes("/graphql"))){console.log("[Leet2Git] XHR GraphQL POST detected to:",this._url),e&&console.log("[Leet2Git] XHR request body:",e);const s=this.onload,l=this.onreadystatechange;this.onreadystatechange=function(){var o,n,d;if(this.readyState===4&&this.status===200)try{if(this.responseText&&((o=this.getResponseHeader("content-type"))!=null&&o.includes("application/json"))){const t=JSON.parse(this.responseText);if(console.log("[Leet2Git] XHR GraphQL response:",t),(n=t==null?void 0:t.data)!=null&&n.question&&t.data.question.topicTags){const r={slug:t.data.question.titleSlug,title:t.data.question.title,difficulty:t.data.question.difficulty,categoryTitle:t.data.question.categoryTitle,topicTags:t.data.question.topicTags};console.log("[Leet2Git] XHR SUCCESS! Question data with topicTags:",r),console.log("[Leet2Git] XHR TopicTags found:",r.topicTags),console.log("[Leet2Git] XHR First topicTag name:",(d=r.topicTags[0])==null?void 0:d.name),chrome.runtime.sendMessage({type:"graphql_question_data",data:r},u=>{console.log("[Leet2Git] XHR Background response:",u)})}}}catch(t){console.error("[Leet2Git] Error processing XHR GraphQL response:",t)}l&&l.call(this)},this.onload=function(o){s&&s.call(this,o)}}return a.call(this,e)}})();
