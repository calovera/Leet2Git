console.log("Leet2Git background script loaded");const p=new Map,v=new Map,f=new Map,k=new Map;function S(e){v.set(e.slug,e),console.log(`[Leet2Git] Question meta cached: ${e.slug}`)}function L(e){return v.get(e)||null}function q(e){return e.split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join("")}async function g(){try{const t=(await chrome.storage.sync.get("pending")).pending||[],o=t.length>0?t.length.toString():"";chrome.action.setBadgeText({text:o}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}catch(e){console.error("Error updating badge:",e)}}chrome.webRequest.onBeforeRequest.addListener(e=>{if(e.method==="POST"&&e.requestBody&&e.requestBody.raw)try{const t=e.requestBody.raw[0].bytes,s=new TextDecoder().decode(t),r=JSON.parse(s);if(r.typed_code&&r.lang&&r.question_id){const n={code:r.typed_code,lang:r.lang,question_id:r.question_id,timestamp:Date.now()};f.set(r.question_id,n),console.log(`[Leet2Git] Code captured for question ${r.question_id}`)}}catch(t){console.error("[Leet2Git] Failed to parse submit request:",t)}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((e,t,o)=>{if(t.url&&o.url&&o.url.includes("leetcode.com/problems/")){const s=o.url.match(/\/problems\/([^\/]+)/);if(s){const r=s[1];p.set(e,{slug:r,metadata:L(r),submissionCode:null}),console.log(`[Leet2Git] Tab ${e} navigated to problem: ${r}`)}}});chrome.tabs.onRemoved.addListener(e=>{p.delete(e),console.log(`[Leet2Git] Cleaned up data for closed tab ${e}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),g()});chrome.runtime.onStartup.addListener(()=>{g()});chrome.webRequest.onCompleted.addListener(async e=>{var s,r;if(e.statusCode!==200||!e.tabId)return;const t=e.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!t)return;const o=t[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`);try{const n=await fetch(e.url,{credentials:"include",headers:{Accept:"application/json"}});if(!n.ok)return;const a=await n.json();if(a.status_msg!=="Accepted"){console.log(`[Leet2Git] Submission not accepted: ${a.status_msg}`);return}const u=a.question_id||a.id,l=f.get(u);if(!l){console.warn(`[Leet2Git] No code record found for question ${u}`);return}const d=p.get(e.tabId),i=(d==null?void 0:d.slug)||D(a);if(!i){console.warn("[Leet2Git] Could not determine problem slug");return}const c=L(i),h={id:`${i}-${Date.now()}`,submissionId:o,title:(c==null?void 0:c.title)||q(i),slug:i,difficulty:(c==null?void 0:c.difficulty)||"Easy",tag:((r=(s=c==null?void 0:c.topicTags)==null?void 0:s[0])==null?void 0:r.name)||(c==null?void 0:c.categoryTitle)||"Algorithms",code:l.code,language:l.lang,runtime:a.display_runtime||"N/A",memory:a.status_memory||"N/A",timestamp:Date.now()};f.delete(u);const y=await chrome.storage.sync.get(["pending","solvedSlugs"]),b=y.pending||[],m=new Set(y.solvedSlugs||[]),w=`${i}-${l.lang}`,$=Date.now(),_=k.get(w);if(_&&$-_<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}b.push(h),k.set(w,$),m.has(i)?console.log(`[Leet2Git] Problem already solved, stats unchanged: ${i}`):(m.add(i),await G(h),console.log(`[Leet2Git] Updated stats for new problem: ${i}`)),await chrome.storage.sync.set({pending:b,solvedSlugs:Array.from(m)}),await g(),console.log(`[Leet2Git] Successfully captured: ${h.title} (${l.lang})`)}catch(n){console.error("[Leet2Git] Error processing submission:",n)}},{urls:["https://leetcode.com/submissions/detail/*/check/"]});function D(e){return e.titleSlug||e.question_slug||null}async function G(e){try{const{stats:t={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=e.difficulty.toLowerCase();t.counts[o]!==void 0&&(t.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${t.counts[o]}`)),t.recentSolves.unshift({id:e.id,title:e.title,language:e.language,difficulty:e.difficulty,timestamp:e.timestamp}),t.recentSolves=t.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:t}),console.log(`[Leet2Git] Stats updated for ${e.title}`)}catch(t){console.error("Error updating stats:",t)}}chrome.runtime.onMessage.addListener((e,t,o)=>{var s,r,n;switch(e.type){case"graphql_question_data":const a={slug:e.data.slug,title:e.data.title,difficulty:e.data.difficulty,tag:((r=(s=e.data.topicTags)==null?void 0:s[0])==null?void 0:r.name)||e.data.categoryTitle||"Algorithms",categoryTitle:e.data.categoryTitle,topicTags:e.data.topicTags};if(S(a),(n=t.tab)!=null&&n.id){const u=p.get(t.tab.id);u&&u.slug===a.slug&&(u.metadata=a,console.log(`[Leet2Git] Updated metadata for tab ${t.tab.id}: ${a.title}`))}o({success:!0});break;case"auth":T(o);break;case"push":A(o);break;case"getHomeData":C(o);break;case"solved_dom":j(e.payload,o);break;case"updateConfig":x(e.payload,o);break;default:console.warn("Unknown message type:",e.type)}return!0});async function T(e){try{const t=await chrome.storage.sync.get(["github_token","github_user","auth"]);let o=null;t.github_token&&t.github_user?o={token:t.github_token,username:t.github_user.username,email:t.github_user.email,connected:t.github_user.connected}:t.auth&&(o=t.auth),e({success:!0,auth:o})}catch(t){console.error("Error handling auth:",t),e({success:!1,error:t.message})}}async function A(e){try{const t=await chrome.storage.sync.get(["pending","github_token","github_user","auth","repo_config","config","owner","repo","branch"]),o=t.pending||[];if(o.length===0){e({success:!1,error:"No pending solutions to push"});return}let s=null;if(t.github_token&&t.github_user?s={token:t.github_token,username:t.github_user.username,email:t.github_user.email,connected:t.github_user.connected}:t.auth&&(s=t.auth),!s||!s.token){e({success:!1,error:"GitHub authentication required"});return}let r;t.config?r=t.config:r={owner:t.owner||s.username,repo:t.repo||"leetcode-solutions",branch:t.branch||"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};const n=[];for(const a of o)try{await E(a,s,r),n.push({success:!0,title:a.title})}catch(u){console.error(`Failed to push ${a.title}:`,u),n.push({success:!1,title:a.title,error:u.message})}await chrome.storage.sync.set({pending:[]}),await g(),e({success:!0,results:n,message:`Pushed ${n.filter(a=>a.success).length}/${n.length} solutions`})}catch(t){console.error("Error handling push:",t),e({success:!1,error:t.message})}}async function C(e){try{const t=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:t.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:t.pending||[],auth:t.auth||null,config:t.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};e({success:!0,data:o})}catch(t){console.error("Error getting home data:",t),e({success:!1,error:t.message})}}async function j(e,t){try{const o={id:e.id,title:e.title,slug:e.slug,language:e.language,difficulty:e.difficulty,code:e.code,timestamp:e.timestamp,description:e.description,submissionId:e.submissionId},{pending:s=[]}=await chrome.storage.sync.get("pending");if(s.some(n=>n.submissionId===o.submissionId||n.title===o.title&&n.language===o.language&&Math.abs(n.timestamp-o.timestamp)<3e4)){t({success:!1,error:"Duplicate solution detected"});return}s.push(o),await chrome.storage.sync.set({pending:s}),await g(),t({success:!0})}catch(o){console.error("Error handling solved from DOM:",o),t({success:!1,error:o.message})}}async function x(e,t){try{await chrome.storage.sync.set({config:e}),t({success:!0})}catch(o){console.error("Error updating config:",o),t({success:!1,error:o.message})}}async function B(e,t){const o=`https://api.github.com/repos/${t.owner}/${t.repo}`;try{const s=await fetch(o,{headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json"}});if(s.ok){console.log(`Repository ${t.owner}/${t.repo} exists`);return}if(s.status===404){console.log(`Creating repository ${t.owner}/${t.repo}`);const r=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:t.repo,description:"LeetCode solutions managed by Leet2Git extension",private:t.private||!1,auto_init:!0})});if(!r.ok){const n=await r.json();throw new Error(`Failed to create repository: ${n.message}`)}console.log(`Repository ${t.owner}/${t.repo} created successfully`)}else throw new Error(`Failed to check repository: ${s.statusText}`)}catch(s){throw console.error("Repository check/creation error:",s),s}}async function E(e,t,o){const s=F(e),r=I(e,o),n=M(e);console.log(`Pushing to GitHub: ${r}/${s}`);try{return await B(t.token,o),await N({token:t.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${r}/${s}`,content:n,message:`Add solution: ${e.title}`})}catch(a){throw console.error(`GitHub push error for ${e.title}:`,a),a}}function F(e){const t=P(e.language);return`${e.title.replace(/[^a-zA-Z0-9]/g,"")}.${t}`}function I(e,t){switch(t.folderStructure){case"difficulty":return e.difficulty;case"topic":return e.tag||"Algorithms";case"flat":default:return"."}}function M(e,t){let o="";return o+=`/*
 * ${e.title}
 * Difficulty: ${e.difficulty}
`,e.tag&&e.tag!=="Algorithms"&&(o+=` * Topic: ${e.tag}
`),o+=` * Runtime: ${e.runtime||"N/A"}
`,o+=` * Memory: ${e.memory||"N/A"}
`,o+=` */

`,o+=e.code,o}function P(e){const t={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(e||"").toLowerCase().trim();return t[o]||"py"}async function N({token:e,owner:t,repo:o,branch:s,path:r,content:n,message:a}){const u=`https://api.github.com/repos/${t}/${o}/contents/${r}`;let l=null;try{const c=await fetch(u,{headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json"}});c.ok&&(l=(await c.json()).sha)}catch{}const d={message:a||`Update ${r}`,content:btoa(unescape(encodeURIComponent(n))),branch:s};l&&(d.sha=l);const i=await fetch(u,{method:"PUT",headers:{Authorization:`Bearer ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(d)});if(!i.ok){const c=await i.json();throw new Error(`GitHub API error: ${c.message||i.statusText}`)}return{success:!0}}
