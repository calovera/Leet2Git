console.log("Leet2Git background script loaded");const g=new Map,k=new Map,m=new Map,$=new Map;function L(t){k.set(t.slug,t),console.log(`[Leet2Git] Question meta cached: ${t.slug}`)}function v(t){return k.get(t)||null}function S(t){return t.split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join("")}async function p(){try{const t=await chrome.storage.sync.get(["pending","auth"]),e=t.pending||[],o=t.auth;if(o&&o.connected){const s=e.length>0?e.length.toString():"";chrome.action.setBadgeText({text:s}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(t){console.error("Error updating badge:",t)}}chrome.webRequest.onBeforeRequest.addListener(t=>{if(t.method==="POST"&&t.requestBody&&t.requestBody.raw)try{const e=t.requestBody.raw[0].bytes,s=new TextDecoder().decode(e),r=JSON.parse(s);if(r.typed_code&&r.lang&&r.question_id){const a={code:r.typed_code,lang:r.lang,question_id:r.question_id,timestamp:Date.now()};m.set(r.question_id,a),console.log(`[Leet2Git] Code captured for question ${r.question_id}`)}}catch(e){console.error("[Leet2Git] Failed to parse submit request:",e)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((t,e,o)=>{if(e.url&&o.url&&o.url.includes("leetcode.com/problems/")){const s=o.url.match(/\/problems\/([^\/]+)/);if(s){const r=s[1];g.set(t,{slug:r,metadata:v(r),submissionCode:null}),console.log(`[Leet2Git] Tab ${t} navigated to problem: ${r}`)}}});chrome.tabs.onRemoved.addListener(t=>{g.delete(t),console.log(`[Leet2Git] Cleaned up data for closed tab ${t}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),p()});chrome.runtime.onStartup.addListener(()=>{p()});chrome.webRequest.onCompleted.addListener(async t=>{if(t.statusCode!==200||!t.tabId)return;const e=t.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!e)return;const o=e[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`);try{const s=await fetch(t.url,{credentials:"include",headers:{Accept:"application/json"}});if(!s.ok)return;const r=await s.json();if(r.status_msg!=="Accepted"){console.log(`[Leet2Git] Submission not accepted: ${r.status_msg}`);return}const a=r.question_id||r.id,i=m.get(a);if(!i){console.warn(`[Leet2Git] No code record found for question ${a}`);return}const u=g.get(t.tabId),n=(u==null?void 0:u.slug)||T(r);if(!n){console.warn("[Leet2Git] Could not determine problem slug");return}const c=v(n),d={id:`${n}-${Date.now()}`,submissionId:o,title:(c==null?void 0:c.title)||S(n),slug:n,difficulty:(c==null?void 0:c.difficulty)||"Easy",tag:c!=null&&c.topicTags&&c.topicTags.length>0?c.topicTags[0].name:(c==null?void 0:c.categoryTitle)||"Algorithms",code:i.code,language:i.lang,runtime:r.display_runtime||"N/A",memory:r.status_memory||"N/A",timestamp:Date.now()};m.delete(a);const l=await chrome.storage.sync.get(["pending","solvedSlugs"]),h=l.pending||[],f=new Set(l.solvedSlugs||[]),y=`${n}-${i.lang}`,w=Date.now(),b=$.get(y);if(b&&w-b<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}h.push(d),$.set(y,w),f.has(n)?console.log(`[Leet2Git] Problem already solved, stats unchanged: ${n}`):(f.add(n),await q(d),console.log(`[Leet2Git] Updated stats for new problem: ${n}`)),await chrome.storage.sync.set({pending:h,solvedSlugs:Array.from(f)}),await p(),console.log(`[Leet2Git] Successfully captured: ${d.title} (${i.lang})`)}catch(s){console.error("[Leet2Git] Error processing submission:",s)}},{urls:["https://leetcode.com/submissions/detail/*/check/"]});function T(t){return t.titleSlug||t.question_slug||null}async function q(t){try{const{stats:e={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=t.difficulty.toLowerCase();e.counts[o]!==void 0&&(e.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${e.counts[o]}`)),e.recentSolves.unshift({id:t.id,title:t.title,language:t.language,difficulty:t.difficulty,timestamp:t.timestamp}),e.recentSolves=e.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:e}),console.log(`[Leet2Git] Stats updated for ${t.title}`)}catch(e){console.error("Error updating stats:",e)}}async function G(t,e){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){e({success:!1,error:"Invalid GitHub token"});return}const s=await o.json(),r={token:t,username:s.login,email:s.email||"",connected:!0};await chrome.storage.sync.set({auth:r}),e({success:!0,username:s.login,auth:r})}catch(o){console.error("Error verifying GitHub token:",o),e({success:!1,error:"Failed to verify token"})}}async function A(t){try{const e=await chrome.storage.sync.get(["auth"]);t({success:!0,auth:e.auth||null})}catch(e){console.error("Error handling auth:",e),t({success:!1,error:e.message})}}async function C(t){try{const e=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:e.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:e.pending||[],auth:e.auth||null,config:e.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};t({success:!0,data:o})}catch(e){console.error("Error getting home data:",e),t({success:!1,error:e.message})}}async function D(t,e){try{await chrome.storage.sync.set({config:t}),e({success:!0})}catch(o){console.error("Error updating config:",o),e({success:!1,error:o.message})}}async function j(t){try{const e=await chrome.storage.sync.get(["pending","auth","config"]),o=e.pending||[];if(o.length===0){t({success:!1,error:"No pending solutions to push"});return}const s=e.auth;if(!s||!s.token){t({success:!1,error:"GitHub authentication required"});return}const r=e.config||{owner:s.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await x(s.token,r);let a=0;const i=[];for(const u of o)try{await _(u,s,r),a++,i.push({success:!0,title:u.title})}catch(n){console.error(`Failed to push ${u.title}:`,n),i.push({success:!1,title:u.title,error:n.message})}await chrome.storage.sync.set({pending:[]}),await p(),t({success:!0,count:a,results:i,message:`Pushed ${a}/${o.length} solutions`})}catch(e){console.error("Error handling push:",e),t({success:!1,error:e.message})}}async function x(t,e){const o=`https://api.github.com/repos/${e.owner}/${e.repo}`;try{const s=await fetch(o,{headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json"}});if(s.ok){console.log(`Repository ${e.owner}/${e.repo} exists`);return}if(s.status===404){console.log(`Creating repository ${e.owner}/${e.repo}`);const r=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:e.repo,description:"LeetCode solutions managed by Leet2Git extension",private:e.private||!1,auto_init:!0})});if(!r.ok){const a=await r.json();throw new Error(`Failed to create repository: ${a.message}`)}console.log(`Repository ${e.owner}/${e.repo} created successfully`)}else throw new Error(`Failed to check repository: ${s.statusText}`)}catch(s){throw console.error("Repository check/creation error:",s),s}}async function _(t,e,o){const s=E(t),r=F(t,o),a=M(t);return console.log(`Pushing to GitHub: ${r}/${s}`),await U({token:e.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${r}/${s}`,content:a,message:`Add solution: ${t.title}`})}function E(t){const e=P(t.language);return`${t.title.replace(/[^a-zA-Z0-9]/g,"")}.${e}`}function F(t,e){switch(e.folderStructure){case"difficulty":return t.difficulty;case"topic":return t.tag||"Algorithms";case"flat":default:return"."}}function M(t,e){let o="";return o+=`/*
 * @lc app=leetcode id=${t.submissionId} lang=${t.language}
 *
 * ${t.title}
 * 
 * Difficulty: ${t.difficulty}
 * Category: ${t.tag}
 * Runtime: ${t.runtime}
 * Memory: ${t.memory}
 */

`,o+=t.code,o}function P(t){const e={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(t||"").toLowerCase().trim();return e[o]||"py"}async function U({token:t,owner:e,repo:o,branch:s,path:r,content:a,message:i}){const u=`https://api.github.com/repos/${e}/${o}/contents/${r}`;let n=null;try{const l=await fetch(u,{headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json"}});l.ok&&(n=(await l.json()).sha)}catch{}const c={message:i||`Update ${r}`,content:btoa(unescape(encodeURIComponent(a))),branch:s};n&&(c.sha=n);const d=await fetch(u,{method:"PUT",headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(c)});if(!d.ok){const l=await d.json();throw new Error(`GitHub API error: ${l.message||d.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((t,e,o)=>{var s;switch(t.type){case"graphql_question_data":const r={slug:t.data.slug,title:t.data.title,difficulty:t.data.difficulty,tag:t.data.topicTags&&t.data.topicTags.length>0?t.data.topicTags[0].name:t.data.categoryTitle||"Algorithms",categoryTitle:t.data.categoryTitle,topicTags:t.data.topicTags};if(L(r),(s=e.tab)!=null&&s.id){const a=g.get(e.tab.id);a&&a.slug===r.slug&&(a.metadata=r,console.log(`[Leet2Git] Updated metadata for tab ${e.tab.id}: ${r.title}`))}o({success:!0});break;case"auth":t.data&&t.data.token?G(t.data.token,o):A(o);break;case"push":j(o);break;case"getHomeData":C(o);break;case"updateConfig":D(t.payload,o);break;default:console.warn("Unknown message type:",t.type)}return!0});
