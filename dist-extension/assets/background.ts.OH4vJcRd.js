console.log("Leet2Git background script loaded");const u=new Map,d=new Map,g=new Map;function f(t){d.set(t.slug,t),console.log(`[Leet2Git] Question meta cached: ${t.slug}`)}function p(t){return d.get(t)||null}async function l(){try{const t=await chrome.storage.sync.get(["pending","auth"]),e=t.pending||[],o=t.auth;if(o&&o.connected){const r=e.length>0?e.length.toString():"";chrome.action.setBadgeText({text:r}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(t){console.error("Error updating badge:",t)}}chrome.webRequest.onBeforeRequest.addListener(t=>{if(t.method==="POST"&&t.requestBody&&t.requestBody.raw)try{const e=t.requestBody.raw[0].bytes,r=new TextDecoder().decode(e),a=JSON.parse(r);if(a.typed_code&&a.lang&&a.question_id){const c={code:a.typed_code,lang:a.lang,question_id:a.question_id,timestamp:Date.now()};g.set(a.question_id,c),console.log(`[Leet2Git] Code captured for question ${a.question_id}`)}}catch(e){console.error("[Leet2Git] Failed to parse submit request:",e)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((t,e,o)=>{if(e.url&&o.url&&o.url.includes("leetcode.com/problems/")){const r=o.url.match(/\/problems\/([^\/]+)/);if(r){const a=r[1];u.set(t,{slug:a,metadata:p(a),submissionCode:null}),console.log(`[Leet2Git] Tab ${t} navigated to problem: ${a}`)}}});chrome.tabs.onRemoved.addListener(t=>{u.delete(t),console.log(`[Leet2Git] Cleaned up data for closed tab ${t}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),l()});chrome.runtime.onStartup.addListener(()=>{l()});async function m(t,e){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`Bearer ${t}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){e({success:!1,error:"Invalid GitHub token"});return}const r=await o.json(),a={token:t,username:r.login,email:r.email||"",connected:!0};await chrome.storage.sync.set({auth:a}),e({success:!0,username:r.login,auth:a})}catch(o){console.error("Error verifying GitHub token:",o),e({success:!1,error:"Failed to verify token"})}}async function y(t){try{const e=await chrome.storage.sync.get(["auth"]);t({success:!0,auth:e.auth||null})}catch(e){console.error("Error handling auth:",e),t({success:!1,error:e.message})}}async function b(t){try{const e=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:e.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:e.pending||[],auth:e.auth||null,config:e.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};t({success:!0,data:o})}catch(e){console.error("Error getting home data:",e),t({success:!1,error:e.message})}}async function w(t,e){try{await chrome.storage.sync.set({config:t}),e({success:!0})}catch(o){console.error("Error updating config:",o),e({success:!1,error:o.message})}}async function $(t){try{const e=await chrome.storage.sync.get(["pending","auth","config"]),o=e.pending||[];if(o.length===0){t({success:!1,error:"No pending solutions to push"});return}const r=e.auth;if(!r||!r.token){t({success:!1,error:"GitHub authentication required"});return}const a=e.config||{owner:r.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};let c=0;for(const n of o)try{await T(n,r,a),c++}catch(s){console.error(`Failed to push ${n.title}:`,s)}await chrome.storage.sync.set({pending:[]}),await l(),t({success:!0,count:c,message:`Pushed ${c}/${o.length} solutions`})}catch(e){console.error("Error handling push:",e),t({success:!1,error:e.message})}}async function T(t,e,o){const r=`${t.title.replace(/[^a-zA-Z0-9]/g,"")}.py`,a=o.folderStructure==="difficulty"?t.difficulty:o.folderStructure==="topic"?t.tag||"Algorithms":".",c=`"""
${t.title}

Difficulty: ${t.difficulty}
Category: ${t.tag}
Runtime: ${t.runtime}
Memory: ${t.memory}
"""

${t.code}
`,n=`https://api.github.com/repos/${o.owner}/${o.repo}/contents/${a}/${r}`,s={message:`Add solution: ${t.title}`,content:btoa(unescape(encodeURIComponent(c))),branch:o.branch||"main"},i=await fetch(n,{method:"PUT",headers:{Authorization:`Bearer ${e.token}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(s)});if(!i.ok){const h=await i.json();throw new Error(`GitHub API error: ${h.message||i.statusText}`)}}chrome.runtime.onMessage.addListener((t,e,o)=>{var r,a,c;switch(t.type){case"graphql_question_data":const n={slug:t.data.slug,title:t.data.title,difficulty:t.data.difficulty,tag:((a=(r=t.data.topicTags)==null?void 0:r[0])==null?void 0:a.name)||t.data.categoryTitle||"Algorithms",categoryTitle:t.data.categoryTitle,topicTags:t.data.topicTags};if(f(n),(c=e.tab)!=null&&c.id){const s=u.get(e.tab.id);s&&s.slug===n.slug&&(s.metadata=n,console.log(`[Leet2Git] Updated metadata for tab ${e.tab.id}: ${n.title}`))}o({success:!0});break;case"auth":t.data&&t.data.token?m(t.data.token,o):y(o);break;case"push":$(o);break;case"getHomeData":b(o);break;case"updateConfig":w(t.payload,o);break;default:console.warn("Unknown message type:",t.type)}return!0});
