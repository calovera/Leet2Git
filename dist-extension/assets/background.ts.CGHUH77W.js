console.log("Leet2Git background script loaded");const g=new Map,w=new Map,f=new Map,b=new Map;function T(t){w.set(t.slug,t),console.log(`[Leet2Git] Question meta cached: ${t.slug}`)}function $(t){return w.get(t)||null}function v(t){return t.split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join("")}async function p(){try{const t=await chrome.storage.sync.get(["pending","auth"]),e=t.pending||[],o=t.auth;if(o&&o.connected){const s=e.length>0?e.length.toString():"";chrome.action.setBadgeText({text:s}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(t){console.error("Error updating badge:",t)}}chrome.webRequest.onBeforeRequest.addListener(t=>{if(t.method==="POST"&&t.requestBody&&t.requestBody.raw)try{const e=t.requestBody.raw[0].bytes,s=new TextDecoder().decode(e),r=JSON.parse(s);if(r.typed_code&&r.lang&&r.question_id){const a={code:r.typed_code,lang:r.lang,question_id:r.question_id,timestamp:Date.now()};f.set(r.question_id,a),console.log(`[Leet2Git] Code captured for question ${r.question_id}`)}}catch(e){console.error("[Leet2Git] Failed to parse submit request:",e)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((t,e,o)=>{if(e.url&&o.url&&o.url.includes("leetcode.com/problems/")){const s=o.url.match(/\/problems\/([^\/]+)/);if(s){const r=s[1];g.set(t,{slug:r,metadata:$(r),submissionCode:null}),console.log(`[Leet2Git] Tab ${t} navigated to problem: ${r}`)}}});chrome.tabs.onRemoved.addListener(t=>{g.delete(t),console.log(`[Leet2Git] Cleaned up data for closed tab ${t}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),p()});chrome.runtime.onStartup.addListener(()=>{p()});chrome.webRequest.onResponseStarted.addListener(async t=>{if(t.statusCode!==200||!t.tabId)return;const e=t.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!e)return;const o=e[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`);try{await chrome.scripting.executeScript({target:{tabId:t.tabId},func:async s=>{try{const a=await(await fetch(window.location.href)).text();(a.includes('"status_msg":"Accepted"')||a.includes("Accepted"))&&chrome.runtime.sendMessage({type:"submission_accepted",submissionId:s,tabId:t.tabId})}catch(r){console.error("Error in content script:",r)}},args:[o]})}catch(s){console.error("[Leet2Git] Error injecting script:",s),setTimeout(async()=>{await k(o,t.tabId)},1e3)}},{urls:["https://leetcode.com/submissions/detail/*/check/"]});async function k(t,e){try{console.log(`[Leet2Git] Processing accepted submission: ${t}`);let o=null,s=null;for(const[L,m]of f.entries())if(m.timestamp>Date.now()-6e5){o=m,s=L;break}if(!o){console.warn(`[Leet2Git] No recent code record found for submission ${t}`);return}const r=g.get(e);if(!r||!r.slug){console.warn(`[Leet2Git] No tab info found for submission ${t}`);return}const a=$(r.slug);let n="Algorithms";a!=null&&a.topicTags&&Array.isArray(a.topicTags)&&a.topicTags.length>0?(n=a.topicTags[0].name,console.log(`[Leet2Git] Using topicTag: ${n}`)):a!=null&&a.categoryTitle&&(n=a.categoryTitle,console.log(`[Leet2Git] Using categoryTitle as fallback: ${n}`));const c={id:`${r.slug}-${Date.now()}`,submissionId:t,title:(a==null?void 0:a.title)||v(r.slug),slug:r.slug,difficulty:(a==null?void 0:a.difficulty)||"Easy",tag:n,code:o.code,language:o.lang,runtime:"N/A",memory:"N/A",timestamp:Date.now()};f.delete(s);const i=await chrome.storage.sync.get(["pending","solvedSlugs"]),d=i.pending||[],l=new Set(i.solvedSlugs||[]),u=`${r.slug}-${o.lang}`,h=Date.now(),y=b.get(u);if(y&&h-y<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}d.push(c),b.set(u,h),l.has(r.slug)?console.log(`[Leet2Git] Problem already solved, stats unchanged: ${r.slug}`):(l.add(r.slug),await G(c),console.log(`[Leet2Git] Updated stats for new problem: ${r.slug}`)),await chrome.storage.sync.set({pending:d,solvedSlugs:Array.from(l)}),await p(),console.log(`[Leet2Git] Successfully captured: ${c.title} (${o.lang})`)}catch(o){console.error("[Leet2Git] Error processing submission:",o)}}async function G(t){try{const{stats:e={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=t.difficulty.toLowerCase();e.counts[o]!==void 0&&(e.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${e.counts[o]}`)),e.recentSolves.unshift({id:t.id,title:t.title,language:t.language,difficulty:t.difficulty,timestamp:t.timestamp}),e.recentSolves=e.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:e}),console.log(`[Leet2Git] Stats updated for ${t.title}`)}catch(e){console.error("Error updating stats:",e)}}async function S(t,e){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){e({success:!1,error:"Invalid GitHub token"});return}const s=await o.json(),r={token:t,username:s.login,email:s.email||"",connected:!0};await chrome.storage.sync.set({auth:r}),e({success:!0,username:s.login,auth:r})}catch(o){console.error("Error verifying GitHub token:",o),e({success:!1,error:"Failed to verify token"})}}async function A(t){try{const e=await chrome.storage.sync.get(["auth"]);t({success:!0,auth:e.auth||null})}catch(e){console.error("Error handling auth:",e),t({success:!1,error:e.message})}}async function q(t){try{const e=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:e.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:e.pending||[],auth:e.auth||null,config:e.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};t({success:!0,data:o})}catch(e){console.error("Error getting home data:",e),t({success:!1,error:e.message})}}async function C(t,e){try{await chrome.storage.sync.set({config:t}),e({success:!0})}catch(o){console.error("Error updating config:",o),e({success:!1,error:o.message})}}async function D(t){try{const e=await chrome.storage.sync.get(["pending","auth","config"]),o=e.pending||[];if(o.length===0){t({success:!1,error:"No pending solutions to push"});return}const s=e.auth;if(!s||!s.token){t({success:!1,error:"GitHub authentication required"});return}const r=e.config||{owner:s.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await x(s.token,r);let a=0;const n=[];for(const c of o)try{await j(c,s,r),a++,n.push({success:!0,title:c.title})}catch(i){console.error(`Failed to push ${c.title}:`,i),n.push({success:!1,title:c.title,error:i.message})}await chrome.storage.sync.set({pending:[]}),await p(),t({success:!0,count:a,results:n,message:`Pushed ${a}/${o.length} solutions`})}catch(e){console.error("Error handling push:",e),t({success:!1,error:e.message})}}async function x(t,e){const o=`https://api.github.com/repos/${e.owner}/${e.repo}`;try{const s=await fetch(o,{headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json"}});if(s.ok){console.log(`Repository ${e.owner}/${e.repo} exists`);return}if(s.status===404){console.log(`Creating repository ${e.owner}/${e.repo}`);const r=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:e.repo,description:"LeetCode solutions managed by Leet2Git extension",private:e.private||!1,auto_init:!0})});if(!r.ok){const a=await r.json();throw new Error(`Failed to create repository: ${a.message}`)}console.log(`Repository ${e.owner}/${e.repo} created successfully`)}else throw new Error(`Failed to check repository: ${s.statusText}`)}catch(s){throw console.error("Repository check/creation error:",s),s}}async function j(t,e,o){const s=E(t),r=I(t,o),a=U(t);return console.log(`Pushing to GitHub: ${r}/${s}`),await P({token:e.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${r}/${s}`,content:a,message:`Add solution: ${t.title}`})}function E(t){const e=M(t.language);return`${t.title.replace(/[^a-zA-Z0-9]/g,"")}.${e}`}function I(t,e){switch(e.folderStructure){case"difficulty":return t.difficulty;case"topic":return t.tag||"Algorithms";case"flat":default:return"."}}function U(t,e){let o="";return o+=`/*
 * @lc app=leetcode id=${t.submissionId} lang=${t.language}
 *
 * ${t.title}
 * 
 * Difficulty: ${t.difficulty}
 * Category: ${t.tag}
 * Runtime: ${t.runtime}
 * Memory: ${t.memory}
 */

`,o+=t.code,o}function M(t){const e={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(t||"").toLowerCase().trim();return e[o]||"py"}async function P({token:t,owner:e,repo:o,branch:s,path:r,content:a,message:n}){const c=`https://api.github.com/repos/${e}/${o}/contents/${r}`;let i=null;try{const u=await fetch(c,{headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json"}});u.ok&&(i=(await u.json()).sha)}catch{}const d={message:n||`Update ${r}`,content:btoa(unescape(encodeURIComponent(a))),branch:s};i&&(d.sha=i);const l=await fetch(c,{method:"PUT",headers:{Authorization:`token ${t}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(d)});if(!l.ok){const u=await l.json();throw new Error(`GitHub API error: ${u.message||l.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((t,e,o)=>{var s,r;switch(t.type){case"graphql_question_data":const a={slug:t.data.slug,title:t.data.title,difficulty:t.data.difficulty,tag:t.data.topicTags&&Array.isArray(t.data.topicTags)&&t.data.topicTags.length>0?t.data.topicTags[0].name:t.data.categoryTitle||"Algorithms",categoryTitle:t.data.categoryTitle,topicTags:t.data.topicTags};if(T(a),(s=e.tab)!=null&&s.id){const n=g.get(e.tab.id);n&&n.slug===a.slug&&(n.metadata=a,console.log(`[Leet2Git] Updated metadata for tab ${e.tab.id}: ${a.title}`))}o({success:!0});break;case"submission_accepted":k(t.submissionId,t.tabId||((r=e.tab)==null?void 0:r.id)),o({success:!0});break;case"auth":t.data&&t.data.token?S(t.data.token,o):A(o);break;case"push":D(o);break;case"getHomeData":q(o);break;case"updateConfig":C(t.payload,o);break;default:console.warn("Unknown message type:",t.type)}return!0});
