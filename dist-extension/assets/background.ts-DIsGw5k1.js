var f={};chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed")});chrome.runtime.onMessage.addListener((t,e,o)=>{switch(t.type){case"GITHUB_AUTH":return g(t.code,o),!0;case"SYNC_SOLUTIONS":return p(o),!0;case"CHECK_LEETCODE_STATUS":return _(o),!0;default:o({error:"Unknown message type"})}});async function g(t,e){try{const o=f.GITHUB_CLIENT_ID||"your_github_client_id",s=f.GITHUB_CLIENT_SECRET||"your_github_client_secret",r=await(await fetch("https://github.com/login/oauth/access_token",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({client_id:o,client_secret:s,code:t})})).json();if(r.access_token){await chrome.storage.local.set({github_token:r.access_token});const n=await(await fetch("https://api.github.com/user",{headers:{Authorization:`token ${r.access_token}`}})).json();await chrome.storage.local.set({github_user:{username:n.login,email:n.email,connected:!0}}),e({success:!0,user:n})}else e({error:"Failed to get access token"})}catch(o){e({error:o instanceof Error?o.message:"Authentication failed"})}}async function p(t){try{const{github_token:e}=await chrome.storage.local.get(["github_token"]);if(!e){t({error:"GitHub not connected"});return}const o=await chrome.tabs.query({url:"https://leetcode.com/*"});if(o.length===0){t({error:"No LeetCode tab found"});return}const s=await chrome.tabs.sendMessage(o[0].id,{type:"GET_SUBMISSIONS"});if(!s||s.length===0){t({error:"No submissions found"});return}const c=[];for(const r of s)try{const a=await m(r,e);c.push({submission:r.title,success:!0,result:a})}catch(a){c.push({submission:r.title,success:!1,error:a instanceof Error?a.message:"Unknown error"})}t({success:!0,results:c})}catch(e){t({error:e instanceof Error?e.message:"Sync failed"})}}async function m(t,e){var d;const o="leetcode-solutions",s=`${t.difficulty}/${t.title.replace(/\s+/g,"-").toLowerCase()}.${t.language==="JavaScript"?"js":t.language==="Python"?"py":"cpp"}`;if((await fetch(`https://api.github.com/repos/${t.username}/${o}`,{headers:{Authorization:`token ${e}`}})).status===404){const h=await chrome.storage.local.get(["settings"]);await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`token ${e}`,"Content-Type":"application/json"},body:JSON.stringify({name:o,description:"Automated LeetCode solutions sync via Leet2Git extension",private:((d=h.settings)==null?void 0:d.privateRepo)||!1,auto_init:!0})})}const r=y(t),a=btoa(unescape(encodeURIComponent(r))),n=await fetch(`https://api.github.com/repos/${t.username}/${o}/contents/${s}`,{headers:{Authorization:`token ${e}`}}),i=(n.status===404,"PUT"),u={message:`Add solution: ${t.title}`,content:a};if(n.status!==404){const h=await n.json();u.sha=h.sha}const l=await fetch(`https://api.github.com/repos/${t.username}/${o}/contents/${s}`,{method:i,headers:{Authorization:`token ${e}`,"Content-Type":"application/json"},body:JSON.stringify(u)});if(!l.ok)throw new Error(`Failed to sync ${t.title}: ${l.statusText}`);return await l.json()}function y(t){const{title:e,difficulty:o,description:s,code:c,language:r,testCases:a}=t;let n=`/*
 * ${e}
 * Difficulty: ${o}
 * 
 * ${s}
 */

`;return n+=c,a&&a.length>0&&(n+=`

/*
 * Test Cases:
`,a.forEach((i,u)=>{n+=` * ${u+1}. Input: ${i.input}, Expected: ${i.output}
`}),n+=" */"),n}async function _(t){try{const e=await chrome.tabs.query({url:"https://leetcode.com/*"});if(e.length===0){t({connected:!1,error:"No LeetCode tab found"});return}const o=await chrome.tabs.sendMessage(e[0].id,{type:"CHECK_LOGIN_STATUS"});t(o)}catch(e){t({connected:!1,error:e instanceof Error?e.message:"Failed to check LeetCode status"})}}chrome.storage.local.get(["settings"],t=>{var e;(e=t.settings)!=null&&e.autoSync&&chrome.alarms.create("autoSync",{periodInMinutes:30})});chrome.alarms.onAlarm.addListener(t=>{t.name==="autoSync"&&p(e=>{console.log("Auto-sync completed:",e)})});
