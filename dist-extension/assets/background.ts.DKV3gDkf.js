console.log("Leet2Git background script loaded");const p=new Map,w=new Map,g=new Map,b=new Map;function L(e){w.set(e.slug,e),console.log(`[Leet2Git] Question meta cached: ${e.slug}`)}function $(e){return w.get(e)||null}function v(e){return e.split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join("")}async function h(){try{const e=await chrome.storage.sync.get(["pending","auth"]),t=e.pending||[],o=e.auth;if(o&&o.connected){const n=t.length>0?t.length.toString():"";chrome.action.setBadgeText({text:n}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(e){console.error("Error updating badge:",e)}}chrome.webRequest.onBeforeRequest.addListener(e=>{if(e.method==="POST"&&e.requestBody&&e.requestBody.raw)try{const t=e.requestBody.raw[0].bytes,n=new TextDecoder().decode(t),s=JSON.parse(n);if(s.typed_code&&s.lang&&s.question_id){const r={code:s.typed_code,lang:s.lang,question_id:s.question_id,timestamp:Date.now()};g.set(s.question_id,r),console.log(`[Leet2Git] Code captured for question ${s.question_id}`)}}catch(t){console.error("[Leet2Git] Failed to parse submit request:",t)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((e,t,o)=>{if(t.url&&o.url&&o.url.includes("leetcode.com/problems/")){const n=o.url.match(/\/problems\/([^\/]+)/);if(n){const s=n[1];p.set(e,{slug:s,metadata:$(s),submissionCode:null}),console.log(`[Leet2Git] Tab ${e} navigated to problem: ${s}`)}}});chrome.tabs.onRemoved.addListener(e=>{p.delete(e),console.log(`[Leet2Git] Cleaned up data for closed tab ${e}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),h()});chrome.runtime.onStartup.addListener(()=>{h()});chrome.webRequest.onResponseStarted.addListener(async e=>{if(e.statusCode!==200||!e.tabId)return;const t=e.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!t)return;const o=t[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`),setTimeout(async()=>{try{let n=!1;for(const[s,r]of g.entries())if(r.timestamp>Date.now()-6e4){n=!0;break}if(n)try{const s=await chrome.scripting.executeScript({target:{tabId:e.tabId},func:()=>{const r=document.body.innerText||document.body.textContent||"",a=document.querySelectorAll('[data-cy="submission-result"], .text-green-s, .text-success');let c=!1;r.includes("Accepted")&&!r.includes("Wrong Answer")&&!r.includes("Time Limit Exceeded")&&(c=!0);for(const i of a)if((i.textContent||i.innerText||"").includes("Accepted")){c=!0;break}return{isAccepted:c,bodyText:r.substring(0,200)}}});s&&s[0]&&s[0].result&&s[0].result.isAccepted?(console.log(`[Leet2Git] Submission ${o} confirmed accepted`),await k(o,e.tabId)):console.log(`[Leet2Git] Submission ${o} not accepted or still processing`)}catch(s){console.log(`[Leet2Git] Could not inject script, skipping submission ${o}:`,s.message)}}catch(n){console.error("[Leet2Git] Error in delayed check:",n)}},2e3)},{urls:["https://leetcode.com/submissions/detail/*/check/"]});async function k(e,t){try{console.log(`[Leet2Git] Processing accepted submission: ${e}`);let o=null,n=null;for(const[T,y]of g.entries())if(y.timestamp>Date.now()-6e5){o=y,n=T;break}if(!o){console.warn(`[Leet2Git] No recent code record found for submission ${e}`);return}const s=p.get(t);if(!s||!s.slug){console.warn(`[Leet2Git] No tab info found for submission ${e}`);return}const r=$(s.slug);let a="Algorithms";r!=null&&r.topicTags&&Array.isArray(r.topicTags)&&r.topicTags.length>0?(a=r.topicTags[0].name,console.log(`[Leet2Git] Using topicTag: ${a}`)):r!=null&&r.categoryTitle&&(a=r.categoryTitle,console.log(`[Leet2Git] Using categoryTitle as fallback: ${a}`));const c={id:`${s.slug}-${Date.now()}`,submissionId:e,title:(r==null?void 0:r.title)||v(s.slug),slug:s.slug,difficulty:(r==null?void 0:r.difficulty)||"Easy",tag:a,code:o.code,language:o.lang,runtime:"N/A",memory:"N/A",timestamp:Date.now()};g.delete(n);const i=await chrome.storage.sync.get(["pending","solvedSlugs"]),d=i.pending||[],u=new Set(i.solvedSlugs||[]),l=`${s.slug}-${o.lang}`,f=Date.now(),m=b.get(l);if(m&&f-m<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}d.push(c),b.set(l,f),u.has(s.slug)?console.log(`[Leet2Git] Problem already solved, stats unchanged: ${s.slug}`):(u.add(s.slug),await A(c),console.log(`[Leet2Git] Updated stats for new problem: ${s.slug}`)),await chrome.storage.sync.set({pending:d,solvedSlugs:Array.from(u)}),await h(),console.log(`[Leet2Git] Successfully captured: ${c.title} (${o.lang})`)}catch(o){console.error("[Leet2Git] Error processing submission:",o)}}async function A(e){try{const{stats:t={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]}}=await chrome.storage.sync.get("stats"),o=e.difficulty.toLowerCase();t.counts[o]!==void 0&&(t.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${t.counts[o]}`)),t.recentSolves.unshift({id:e.id,title:e.title,language:e.language,difficulty:e.difficulty,timestamp:e.timestamp}),t.recentSolves=t.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:t}),console.log(`[Leet2Git] Stats updated for ${e.title}`)}catch(t){console.error("Error updating stats:",t)}}async function G(e,t){try{const o=await fetch("https://api.github.com/user",{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(!o.ok){t({success:!1,error:"Invalid GitHub token"});return}const n=await o.json(),s={token:e,username:n.login,email:n.email||"",connected:!0};await chrome.storage.sync.set({auth:s}),t({success:!0,username:n.login,auth:s})}catch(o){console.error("Error verifying GitHub token:",o),t({success:!1,error:"Failed to verify token"})}}async function S(e){try{const t=await chrome.storage.sync.get(["auth"]);e({success:!0,auth:t.auth||null})}catch(t){console.error("Error handling auth:",t),e({success:!1,error:t.message})}}async function q(e){try{const t=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:t.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:t.pending||[],auth:t.auth||null,config:t.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};e({success:!0,data:o})}catch(t){console.error("Error getting home data:",t),e({success:!1,error:t.message})}}async function x(e,t){try{await chrome.storage.sync.set({config:e}),t({success:!0})}catch(o){console.error("Error updating config:",o),t({success:!1,error:o.message})}}async function C(e){try{const t=await chrome.storage.sync.get(["pending","auth","config"]),o=t.pending||[];if(o.length===0){e({success:!1,error:"No pending solutions to push"});return}const n=t.auth;if(!n||!n.token){e({success:!1,error:"GitHub authentication required"});return}const s=t.config||{owner:n.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await D(n.token,s);let r=0;const a=[];for(const c of o)try{await E(c,n,s),r++,a.push({success:!0,title:c.title})}catch(i){console.error(`Failed to push ${c.title}:`,i),a.push({success:!1,title:c.title,error:i.message})}await chrome.storage.sync.set({pending:[]}),await h(),e({success:!0,count:r,results:a,message:`Pushed ${r}/${o.length} solutions`})}catch(t){console.error("Error handling push:",t),e({success:!1,error:t.message})}}async function D(e,t){const o=`https://api.github.com/repos/${t.owner}/${t.repo}`;try{const n=await fetch(o,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});if(n.ok){console.log(`Repository ${t.owner}/${t.repo} exists`);return}if(n.status===404){console.log(`Creating repository ${t.owner}/${t.repo}`);const s=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:t.repo,description:"LeetCode solutions managed by Leet2Git extension",private:t.private||!1,auto_init:!0})});if(!s.ok){const r=await s.json();throw new Error(`Failed to create repository: ${r.message}`)}console.log(`Repository ${t.owner}/${t.repo} created successfully`)}else throw new Error(`Failed to check repository: ${n.statusText}`)}catch(n){throw console.error("Repository check/creation error:",n),n}}async function E(e,t,o){const n=j(e),s=I(e,o),r=U(e);return console.log(`Pushing to GitHub: ${s}/${n}`),await M({token:t.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${s}/${n}`,content:r,message:`Add solution: ${e.title}`})}function j(e){const t=P(e.language);return`${e.title.replace(/[^a-zA-Z0-9]/g,"")}.${t}`}function I(e,t){switch(t.folderStructure){case"difficulty":return e.difficulty;case"topic":return e.tag||"Algorithms";case"flat":default:return"."}}function U(e,t){let o="";return o+=`/*
 * @lc app=leetcode id=${e.submissionId} lang=${e.language}
 *
 * ${e.title}
 * 
 * Difficulty: ${e.difficulty}
 * Category: ${e.tag}
 * Runtime: ${e.runtime}
 * Memory: ${e.memory}
 */

`,o+=e.code,o}function P(e){const t={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(e||"").toLowerCase().trim();return t[o]||"py"}async function M({token:e,owner:t,repo:o,branch:n,path:s,content:r,message:a}){const c=`https://api.github.com/repos/${t}/${o}/contents/${s}`;let i=null;try{const l=await fetch(c,{headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json"}});l.ok&&(i=(await l.json()).sha)}catch{}const d={message:a||`Update ${s}`,content:btoa(unescape(encodeURIComponent(r))),branch:n};i&&(d.sha=i);const u=await fetch(c,{method:"PUT",headers:{Authorization:`token ${e}`,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(d)});if(!u.ok){const l=await u.json();throw new Error(`GitHub API error: ${l.message||u.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((e,t,o)=>{var n,s;switch(e.type){case"graphql_question_data":const r={slug:e.data.slug,title:e.data.title,difficulty:e.data.difficulty,tag:e.data.topicTags&&Array.isArray(e.data.topicTags)&&e.data.topicTags.length>0?e.data.topicTags[0].name:e.data.categoryTitle||"Algorithms",categoryTitle:e.data.categoryTitle,topicTags:e.data.topicTags};if(L(r),(n=t.tab)!=null&&n.id){const a=p.get(t.tab.id);a&&a.slug===r.slug&&(a.metadata=r,console.log(`[Leet2Git] Updated metadata for tab ${t.tab.id}: ${r.title}`))}o({success:!0});break;case"submission_accepted":k(e.submissionId,e.tabId||((s=t.tab)==null?void 0:s.id)),o({success:!0});break;case"auth":e.data&&e.data.token?G(e.data.token,o):S(o);break;case"push":C(o);break;case"getHomeData":q(o);break;case"updateConfig":x(e.payload,o);break;default:console.warn("Unknown message type:",e.type)}return!0});
