console.log("Leet2Git background script loaded");const w=new Map,f=new Map,$=new Map;function L(e){return e.split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join("")}async function p(){try{const e=await chrome.storage.sync.get(["pending","auth"]),t=e.pending||[],o=e.auth;if(o&&o.connected){const r=t.length>0?t.length.toString():"";chrome.action.setBadgeText({text:r}),chrome.action.setBadgeBackgroundColor({color:"#3B82F6"})}else chrome.action.setBadgeText({text:""})}catch(e){console.error("Error updating badge:",e)}}chrome.webRequest.onBeforeRequest.addListener(e=>{if(e.method==="POST"&&e.requestBody&&e.requestBody.raw)try{const t=e.requestBody.raw[0].bytes,r=new TextDecoder().decode(t),a=JSON.parse(r);if(a.typed_code&&a.lang&&a.question_id){const s={code:a.typed_code,lang:a.lang,question_id:a.question_id,timestamp:Date.now()};f.set(a.question_id,s),console.log(`[Leet2Git] Code captured for question ${a.question_id}`)}}catch(t){console.error("[Leet2Git] Failed to parse submit request:",t)}return{}},{urls:["*://leetcode.com/problems/*/submit/"]},["requestBody"]);chrome.tabs.onUpdated.addListener((e,t,o)=>{if(t.url&&o.url&&o.url.includes("leetcode.com/problems/")){const r=o.url.match(/\/problems\/([^\/]+)/);if(r){const a=r[1];w.set(e,{slug:a,submissionCode:null}),console.log(`[Leet2Git] Tab ${e} navigated to problem: ${a}`)}}});chrome.tabs.onRemoved.addListener(e=>{w.delete(e),console.log(`[Leet2Git] Cleaned up data for closed tab ${e}`)});chrome.runtime.onInstalled.addListener(()=>{console.log("Leet2Git extension installed"),p()});chrome.runtime.onStartup.addListener(()=>{p()});chrome.webRequest.onCompleted.addListener(async e=>{if(e.statusCode!==200||!e.tabId)return;const t=e.url.match(/\/submissions\/detail\/(\d+)\/check\//);if(!t)return;const o=t[1];console.log(`[Leet2Git] Intercepted submission check: ${o}`),setTimeout(async()=>{try{let r=null,a=null;for(const[s,n]of f.entries())if(n&&n.timestamp>Date.now()-3e5){r=n,a=s;break}if(!r){console.log(`[Leet2Git] No recent code found for submission ${o}`);return}try{const s=await fetch(e.url,{method:"GET",credentials:"include"});if(s.ok){const n=await s.text();let c;try{c=JSON.parse(n)}catch{if(n.includes('"status_msg":"Accepted"')||n.includes("Accepted")&&!n.includes("Wrong Answer")&&!n.includes("Time Limit Exceeded"))c={status_msg:"Accepted"};else{console.log(`[Leet2Git] Submission ${o} not accepted`);return}}c&&c.status_msg==="Accepted"?(console.log(`[Leet2Git] Submission ${o} confirmed accepted`),await y(o,e.tabId,c)):console.log(`[Leet2Git] Submission ${o} status: ${(c==null?void 0:c.status_msg)||"unknown"}`)}else console.log(`[Leet2Git] Could not fetch submission result: ${s.status}`)}catch(s){console.log(`[Leet2Git] Fetch error, assuming accepted for recent code: ${s.message}`),await y(o,e.tabId,null)}}catch(r){console.error("[Leet2Git] Error processing submission:",r)}},3e3)},{urls:["https://leetcode.com/submissions/detail/*/check/"]});async function y(e,t,o=null){try{console.log(`[Leet2Git] Processing accepted submission: ${e}`);let r=null,a=null;for(const[k,b]of f.entries())if(b.timestamp>Date.now()-6e5){r=b,a=k;break}if(!r){console.warn(`[Leet2Git] No recent code record found for submission ${e}`);return}const s=w.get(t);if(!s||!s.slug){console.warn(`[Leet2Git] No tab info found for submission ${e}`);return}const i={id:`${s.slug}-${Date.now()}`,submissionId:e,title:L(s.slug),slug:s.slug,difficulty:"Level",folderPath:"Problems",code:r.code,language:r.lang,runtime:"N/A",memory:"N/A",timestamp:Date.now()};console.log(`[Leet2Git] Solution payload created for ${s.slug}`),a&&f.delete(a);const l=await chrome.storage.sync.get(["pending","solvedSlugs"]),d=l.pending||[],h=new Set(l.solvedSlugs||[]),g=`${s.slug}-${r.lang}`,u=Date.now(),m=$.get(g);if(m&&u-m<3e5){console.log("[Leet2Git] Ignoring duplicate submission within 5 minutes");return}d.push(i),$.set(g,u),h.has(s.slug)?console.log(`[Leet2Git] Problem already solved in different language, allowing upload but not updating stats: ${s.slug}`):(h.add(s.slug),await v(i),console.log(`[Leet2Git] Updated stats for new problem: ${s.slug}`)),await chrome.storage.sync.set({pending:d,solvedSlugs:Array.from(h)}),await p(),console.log(`[Leet2Git] Successfully captured: ${i.title} (${r.lang})`)}catch(r){console.error("[Leet2Git] Error processing submission:",r)}}async function v(e){try{const{stats:t={streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[],lastSolveDate:null}}=await chrome.storage.sync.get("stats"),o=e.difficulty.toLowerCase();t.counts[o]!==void 0&&(t.counts[o]++,console.log(`[Leet2Git] Updated ${o} count to ${t.counts[o]}`));const r=new Date().toDateString(),a=t.lastSolveDate;if(!a)t.streak=1,t.lastSolveDate=r,console.log("[Leet2Git] Started streak with first solve");else if(a===r)console.log(`[Leet2Git] Already solved today, streak remains ${t.streak}`);else{const s=new Date(a),n=new Date(r),c=Math.floor((n.getTime()-s.getTime())/(1e3*60*60*24));c===1?(t.streak++,t.lastSolveDate=r,console.log(`[Leet2Git] Consecutive day! Streak increased to ${t.streak}`)):(t.streak=1,t.lastSolveDate=r,console.log(`[Leet2Git] Streak broken (${c} days gap), reset to 1`))}t.recentSolves.unshift({id:e.id,title:e.title,language:e.language,difficulty:e.difficulty,timestamp:e.timestamp}),t.recentSolves=t.recentSolves.slice(0,10),await chrome.storage.sync.set({stats:t}),console.log(`[Leet2Git] Stats updated for ${e.title}, streak: ${t.streak}`)}catch(t){console.error("Error updating stats:",t)}}async function S(e,t,o=!1){try{const r=o?`Bearer ${e}`:`token ${e}`,a=await fetch("https://api.github.com/user",{headers:{Authorization:r,Accept:"application/vnd.github.v3+json"}});if(!a.ok){t({success:!1,error:"Invalid GitHub token"});return}const s=await a.json(),n={token:e,username:s.login,email:s.email||"",connected:!0,authType:o?"oauth":"pat"};await chrome.storage.sync.set({auth:n}),t({success:!0,username:s.login,auth:n})}catch(r){console.error("Error verifying GitHub token:",r),t({success:!1,error:"Failed to verify token"})}}async function D(e){try{const t="Ov23liPVnJxvGsF4Y9qm",o=chrome.identity.getRedirectURL();console.log("OAuth redirect URI:",o);const r=new URL("https://github.com/login/oauth/authorize");r.searchParams.set("client_id",t),r.searchParams.set("redirect_uri",o),r.searchParams.set("scope","repo user:email"),chrome.identity.launchWebAuthFlow({url:r.toString(),interactive:!0},async a=>{if(chrome.runtime.lastError){console.error("OAuth flow error:",chrome.runtime.lastError),e({success:!1,error:chrome.runtime.lastError.message});return}if(!a){e({success:!1,error:"No redirect URL received"});return}try{const n=new URL(a).searchParams.get("code");if(!n){e({success:!1,error:"No authorization code received"});return}console.log("Got authorization code, exchanging for token...");const c=await fetch("http://localhost:5000/api/github/oauth/token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({code:n})}),i=await c.json();if(!c.ok||i.error){console.error("Token exchange error:",i),e({success:!1,error:i.error||"Failed to exchange code for token"});return}const l={token:i.access_token,username:i.user.login,email:i.user.email||"",connected:!0,authType:"oauth",userInfo:i.user};await chrome.storage.sync.set({auth:l}),e({success:!0,username:i.user.login,auth:l})}catch(s){console.error("OAuth processing error:",s),e({success:!1,error:s.message})}})}catch(t){console.error("OAuth login error:",t),e({success:!1,error:t.message})}}async function G(e){try{const t=await chrome.storage.sync.get(["auth"]);e({success:!0,auth:t.auth||null})}catch(t){console.error("Error handling auth:",t),e({success:!1,error:t.message})}}async function A(e){try{const t=await chrome.storage.sync.get(["stats","pending","auth","config"]),o={stats:t.stats||{streak:0,counts:{easy:0,medium:0,hard:0},recentSolves:[]},pending:t.pending||[],auth:t.auth||null,config:t.config||{owner:"",repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1}};e({success:!0,data:o})}catch(t){console.error("Error getting home data:",t),e({success:!1,error:t.message})}}async function T(e,t){try{await chrome.storage.sync.set({config:e}),t({success:!0})}catch(o){console.error("Error updating config:",o),t({success:!1,error:o.message})}}async function C(e){try{const t=await chrome.storage.sync.get(["pending","auth","config"]),o=t.pending||[];if(o.length===0){e({success:!1,error:"No pending solutions to push"});return}const r=t.auth;if(!r||!r.token){e({success:!1,error:"GitHub authentication required"});return}const a=t.config||{owner:r.username,repo:"leetcode-solutions",branch:"main",private:!1,folderStructure:"topic",includeDescription:!0,includeTestCases:!1};await q(r.token,a,r.authType);let s=0;const n=[];for(const c of o)try{await P(c,r,a),s++,n.push({success:!0,title:c.title})}catch(i){console.error(`Failed to push ${c.title}:`,i),n.push({success:!1,title:c.title,error:i.message})}await chrome.storage.sync.set({pending:[]}),await p(),e({success:!0,count:s,results:n,message:`Pushed ${s}/${o.length} solutions`})}catch(t){console.error("Error handling push:",t),e({success:!1,error:t.message})}}async function q(e,t,o="pat"){const r=`https://api.github.com/repos/${t.owner}/${t.repo}`,a=o==="oauth"?`Bearer ${e}`:`token ${e}`;try{const s=await fetch(r,{headers:{Authorization:a,Accept:"application/vnd.github.v3+json"}});if(s.ok){console.log(`Repository ${t.owner}/${t.repo} exists`);return}if(s.status===404){console.log(`Creating repository ${t.owner}/${t.repo}`);const n=await fetch("https://api.github.com/user/repos",{method:"POST",headers:{Authorization:a,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify({name:t.repo,description:"LeetCode solutions managed by Leet2Git extension",private:t.private||!1,auto_init:!0})});if(!n.ok){const c=await n.json();throw new Error(`Failed to create repository: ${c.message}`)}console.log(`Repository ${t.owner}/${t.repo} created successfully`)}else throw new Error(`Failed to check repository: ${s.statusText}`)}catch(s){throw console.error("Repository check/creation error:",s),s}}async function P(e,t,o){const r=x(e),a=E(e),s=j(e);return console.log(`Pushing to GitHub: ${a}/${r}`),await F({token:t.token,owner:o.owner,repo:o.repo,branch:o.branch||"main",path:`${a}/${r}`,content:s,message:`Add solution: ${e.title}`,authType:t.authType||"pat"})}function x(e){const t=U(e.language);return`${e.title.replace(/[^a-zA-Z0-9]/g,"")}.${t}`}function E(e,t){const o=e.folderPath||"Problems";return console.log(`[Leet2Git] Using user-selected folder path: ${o}`),o}function j(e,t){let o="";return o+=`/*
 * @lc app=leetcode id=${e.submissionId} lang=${e.language}
 *
 * ${e.title}
 * 
 * Difficulty: ${e.difficulty}
 * Category: ${e.tag}
 * Runtime: ${e.runtime}
 * Memory: ${e.memory}
 */

`,o+=e.code,o}function U(e){const t={javascript:"js",python:"py",python3:"py",java:"java","c++":"cpp",cpp:"cpp",c:"c","c#":"cs",csharp:"cs",ruby:"rb",swift:"swift",go:"go",golang:"go",scala:"scala",kotlin:"kt",rust:"rs",php:"php",typescript:"ts",mysql:"sql",postgresql:"sql"},o=(e||"").toLowerCase().trim();return t[o]||"py"}async function F({token:e,owner:t,repo:o,branch:r,path:a,content:s,message:n,authType:c}){const i=`https://api.github.com/repos/${t}/${o}/contents/${a}`,l=c==="oauth"?`Bearer ${e}`:`token ${e}`;let d=null;try{const u=await fetch(i,{headers:{Authorization:l,Accept:"application/vnd.github.v3+json"}});u.ok&&(d=(await u.json()).sha)}catch{}const h={message:n||`Update ${a}`,content:btoa(unescape(encodeURIComponent(s))),branch:r};d&&(h.sha=d);const g=await fetch(i,{method:"PUT",headers:{Authorization:l,Accept:"application/vnd.github.v3+json","Content-Type":"application/json"},body:JSON.stringify(h)});if(!g.ok){const u=await g.json();throw new Error(`GitHub API error: ${u.message||g.statusText}`)}return{success:!0}}chrome.runtime.onMessage.addListener((e,t,o)=>{var r;switch(e.type){case"submission_accepted":y(e.submissionId,e.tabId||((r=t.tab)==null?void 0:r.id)),o({success:!0});break;case"auth":e.data&&e.data.token?S(e.data.token,o):G(o);break;case"oauthLogin":D(o);break;case"push":C(o);break;case"getHomeData":A(o);break;case"updateConfig":T(e.payload,o);break;case"updateBadge":p(),o({success:!0});break;default:console.warn("Unknown message type:",e.type)}return!0});
