console.log("Leet2Git content script loaded");(function(){const n=window.fetch;window.fetch=function(i,a){const c=typeof i=="string"?i:i instanceof URL?i.href:i.url;return console.log("[Leet2Git] Fetch intercepted:",c),c.includes("/graphql")?(console.log("[Leet2Git] GraphQL request detected"),n.call(this,i,a).then(async o=>{var r,e;if(o.ok&&((r=o.headers.get("content-type"))!=null&&r.includes("application/json")))try{const t=await o.clone().json();if(console.log("[Leet2Git] GraphQL response data:",t),(e=t==null?void 0:t.data)!=null&&e.question){const l={slug:t.data.question.titleSlug,title:t.data.question.title,difficulty:t.data.question.difficulty,categoryTitle:t.data.question.categoryTitle,topicTags:t.data.question.topicTags||[]};console.log("[Leet2Git] Question data extracted:",l),chrome.runtime.sendMessage({type:"graphql_question_data",data:l},u=>{console.log("[Leet2Git] Background response:",u)})}}catch(s){console.error("[Leet2Git] Error processing GraphQL response:",s)}return o})):n.call(this,i,a)}})();function d(){var n,i;try{const a=document.querySelectorAll("script");for(const c of a){const o=c.textContent||"";if(o.includes("questionId")&&o.includes("topicTags")){console.log("[Leet2Git] Found question data in DOM script");const r=o.match(/window\.__INITIAL_STATE__\s*=\s*({.+?});/);if(r)try{const e=JSON.parse(r[1]);console.log("[Leet2Git] Initial state extracted:",e);const s=((n=e==null?void 0:e.questionDetail)==null?void 0:n.question)||(e==null?void 0:e.question)||((i=e==null?void 0:e.data)==null?void 0:i.question);if(s&&s.titleSlug){const t={slug:s.titleSlug,title:s.title,difficulty:s.difficulty,categoryTitle:s.categoryTitle,topicTags:s.topicTags||[]};console.log("[Leet2Git] Question data from DOM:",t),chrome.runtime.sendMessage({type:"graphql_question_data",data:t})}}catch(e){console.log("[Leet2Git] Failed to parse initial state:",e)}}}}catch(a){console.error("[Leet2Git] Error extracting from DOM:",a)}}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",d):d();let g=location.href;new MutationObserver(()=>{const n=location.href;n!==g&&(g=n,n.includes("/problems/")&&(console.log("[Leet2Git] URL changed to problem page:",n),setTimeout(d,1e3)))}).observe(document,{subtree:!0,childList:!0});(function(){const n=XMLHttpRequest.prototype.open,i=XMLHttpRequest.prototype.send;XMLHttpRequest.prototype.open=function(a,c,...o){return this._method=a,this._url=typeof c=="string"?c:c.href,n.apply(this,[a,c,...o])},XMLHttpRequest.prototype.send=function(a){var c;if(this._method==="POST"&&((c=this._url)!=null&&c.includes("/graphql"))){const o=this.onload;this.onload=function(r){var e,s;try{if(this.responseText&&((e=this.getResponseHeader("content-type"))!=null&&e.includes("application/json"))){const t=JSON.parse(this.responseText);if((s=t==null?void 0:t.data)!=null&&s.question){const l={slug:t.data.question.titleSlug,title:t.data.question.title,difficulty:t.data.question.difficulty,categoryTitle:t.data.question.categoryTitle,topicTags:t.data.question.topicTags||[]};chrome.runtime.sendMessage({type:"graphql_question_data",data:l},u=>{u!=null&&u.success&&console.log("[Leet2Git] XHR GraphQL metadata sent:",l.title)})}}}catch(t){console.error("[Leet2Git] Error processing XHR GraphQL response:",t)}o&&o.call(this,r)}}return i.call(this,a)}})();
