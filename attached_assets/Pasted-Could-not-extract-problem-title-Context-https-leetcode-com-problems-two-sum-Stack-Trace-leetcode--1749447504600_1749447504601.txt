Could not extract problem title
Context
https://leetcode.com/problems/two-sum/
Stack Trace
leetcode-hook.js:1 (extractSolutionData)
leetcode-hook.js:1 (handleAcceptedSubmission)
1
2
3
4
console.log("Leet2Git content script loaded on LeetCode");class f{constructor(){this.observer=null,this.isObserving=!1,this.init()}init(){document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>this.setupObserver()):this.setupObserver()}setupObserver(){this.observer=new MutationObserver(r=>{r.forEach(e=>{e.type==="childList"&&this.checkForAcceptedModal()})}),this.startObserving()}startObserving(){this.observer&&!this.isObserving&&(this.observer.observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeFilter:["class","data-state"]}),this.isObserving=!0,console.log("Started observing DOM for LeetCode submissions"))}stopObserving(){this.observer&&this.isObserving&&(this.observer.disconnect(),this.isObserving=!1,console.log("Stopped observing DOM"))}checkForAcceptedModal(){var o,t,s;const r=['[data-e2e-locator="submission-result"]',".text-green-500",'[class*="text-green"]',".submission-status",'[data-cy="submission-result"]'];let e=null;for(const n of r)try{const c=document.querySelectorAll(n);for(const i of c)if((o=i.textContent)!=null&&o.includes("Accepted")){e=i;break}if(e)break}catch{}if(!e){const n=document.querySelectorAll('[class*="success"], [class*="green"], .text-green-500, .text-success');for(const c of n)if((t=c.textContent)!=null&&t.toLowerCase().includes("accepted")||(s=c.textContent)!=null&&s.toLowerCase().includes("success")){e=c;break}}e&&this.isOnProblemPage()&&(console.log("Detected accepted submission"),this.handleAcceptedSubmission())}isOnProblemPage(){return window.location.pathname.includes("/problems/")&&!window.location.pathname.includes("/submissions")}async handleAcceptedSubmission(){try{await new Promise(e=>setTimeout(e,1e3));const r=this.extractSolutionData();r&&chrome.runtime.sendMessage({type:"solved_dom",payload:r},e=>{e!=null&&e.success?console.log("Solution sent to background:",r.title):console.error("Failed to send solution:",e==null?void 0:e.error)})}catch(r){console.error("Error handling accepted submission:",r)}}extractSolutionData(){var r,e,o;try{const t=document.querySelector('[data-cy="question-title"]')||document.querySelector('h1[class*="title"]')||document.querySelector(".css-v3d350")||document.querySelector("h1"),s=(r=t==null?void 0:t.textContent)==null?void 0:r.trim();if(!s)return console.error("Could not extract problem title"),null;const n=window.location.pathname.match(/\/problems\/([^\/]+)/),c=n==null?void 0:n[1];if(!c)return console.error("Could not extract problem slug"),null;const i=document.querySelector("[diff]")||document.querySelector('[class*="difficulty"]')||document.querySelector(".css-dcmtd5");let l="Medium";if(i){const u=((e=i.textContent)==null?void 0:e.toLowerCase())||"";u.includes("easy")?l="Easy":u.includes("hard")&&(l="Hard")}const a=document.querySelector('[data-track-load="description_content"]')||document.querySelector(".css-1iinkds")||document.querySelector('[class*="question-content"]'),h=((o=a==null?void 0:a.textContent)==null?void 0:o.trim())||"",d=this.extractCodeFromEditor();if(!d)return console.error("Could not extract code from editor"),null;const y=this.extractLanguage();return{title:s,slug:c,difficulty:l,description:h,code:d,language:y}}catch(t){return console.error("Error extracting solution data:",t),null}}extractCodeFromEditor(){const r=[".monaco-editor .view-lines",".CodeMirror-code","[data-mode-id] .view-lines",".ace_content",'textarea[data-cy="code-editor"]'];for(const e of r){const o=document.querySelector(e);if(o){if(o.classList.contains("view-lines")){const t=o.querySelectorAll(".view-line");return Array.from(t).map(s=>s.textContent||"").join(`
`)}if(o.classList.contains("CodeMirror-code")){const t=o.querySelectorAll(".CodeMirror-line");return Array.from(t).map(s=>s.textContent||"").join(`
`)}return o.tagName==="TEXTAREA"?o.value:o.textContent||""}}try{if(window.monaco&&window.monaco.editor){const e=window.monaco.editor.getModels();if(e.length>0)return e[0].getValue()}}catch{console.log("Could not access Monaco editor instance")}try{if(window.editor&&typeof window.editor.getValue=="function")return window.editor.getValue()}catch{console.log("Could not access global editor")}return""}extractLanguage(){const r=['[data-cy="lang-select"] .ant-select-selection-item',".lang-select .selected",'[class*="language-select"] [class*="selected"]','button[data-state="selected"][role="option"]'];for(const s of r){const n=document.querySelector(s);if(n!=null&&n.textContent)return n.textContent.trim()}const o=new URLSearchParams(window.location.search).get("lang");if(o)return o;const t=this.extractCodeFromEditor();return t.includes("def ")||t.includes("print(")?"Python":t.includes("function ")||t.includes("const ")||t.includes("let ")?"JavaScript":t.includes("class ")&&t.includes("public static")?"Java":t.includes("#include")||t.includes("std::")?"C++":"JavaScript"}destroy(){this.stopObserving(),this.observer&&(this.observer.disconnect(),this.observer=null)}}const b=new f;let m=window.location.href;const g=new MutationObserver(()=>{window.location.href!==m&&(m=window.location.href,console.log("Page navigated, reinitializing hook"),b.destroy(),setTimeout(()=>{new f},1e3))});g.observe(document.body,{childList:!0,subtree:!0});window.addEventListener("beforeunload",()=>{b.destroy(),g.disconnect()});
 
Refused to load the script 'https://cdn.tailwindcss.com/' because it violates the following Content Security Policy directive: "script-src 'self'". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.
Refused to load the script 'https://cdn.tailwindcss.com/' because it violates the following Content Security Policy directive: "script-src 'self' 'wasm-unsafe-eval' 'inline-speculation-rules' http://localhost:* http://127.0.0.1:*". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.
Refused to execute inline event handler because it violates the following Content Security Policy directive: "script-src 'self'". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution. Note that hashes do not apply to event handlers, style attributes and javascript: navigations unless the 'unsafe-hashes' keyword is present.
Refused to execute inline event handler because it violates the following Content Security Policy directive: "script-src 'self' 'wasm-unsafe-eval' 'inline-speculation-rules' http://localhost:* http://127.0.0.1:*". Either the 'unsafe-inline' keyword, a hash ('sha256-...'), or a nonce ('nonce-...') is required to enable inline execution. Note that hashes do not apply to event handlers, style attributes and javascript: navigations unless the 'unsafe-hashes' keyword is present.
Refused to load the script 'https://cdn.tailwindcss.com/' because it violates the following Content Security Policy directive: "script-src 'self'". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.
Refused to load the script 'https://cdn.tailwindcss.com/' because it violates the following Content Security Policy directive: "script-src 'self' 'wasm-unsafe-eval' 'inline-speculation-rules' http://localhost:* http://127.0.0.1:*". Note that 'script-src-elem' was not explicitly set, so 'script-src' is used as a fallback.