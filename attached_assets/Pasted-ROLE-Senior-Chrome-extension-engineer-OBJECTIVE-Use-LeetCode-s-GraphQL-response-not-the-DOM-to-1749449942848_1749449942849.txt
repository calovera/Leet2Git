ROLE • Senior Chrome-extension engineer.

OBJECTIVE  
Use LeetCode’s GraphQL response—not the DOM—to capture question metadata.

TASKS
1. ADD  src/utils/parseQuestionMeta.ts
------------------------------------------------
export interface QMeta {
  slug: string;
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
  tag: string;                    // first topic tag or "Uncategorized"
}

export function parseQuestionMeta(res: unknown): QMeta | null {
  try {
    const q = (res as any)?.data?.question;
    if (!q?.titleSlug) return null;
    return {
      slug: q.titleSlug,
      title: q.title ?? q.titleSlug.replace(/-/g, " "),
      difficulty: (q.difficulty as any) ?? "Easy",
      tag:
        (Array.isArray(q.topicTags) && q.topicTags[0]?.name) ||
        "Uncategorized"
    };
  } catch {
    return null;
  }
}
------------------------------------------------

2. UPDATE  src/background.ts
------------------------------------------------
// top
import { parseQuestionMeta } from "./utils/parseQuestionMeta";
import * as qCache from "./utils/questionCache";

// new listener (register ONCE)
chrome.webRequest.onCompleted.addListener(async d => {
  if (d.method !== "POST" || !d.url.startsWith("https://leetcode.com/graphql"))
    return;
  if (d.statusCode !== 200) return;

  const raw = await d.getContent?.();          // vite-plugin-crx injects helper
  if (!raw) return;
  const meta = parseQuestionMeta(JSON.parse(raw));
  if (meta) qCache.put(meta);
}, { urls: ["https://leetcode.com/graphql*"] });
------------------------------------------------

3. MODIFY existing submission-details handler  
   • After you build `payload`, replace fields with cache entry if present:
------------------------------------------------
const meta = qCache.get(json.title_slug);
if (meta) {
  payload.title      = meta.title;
  payload.difficulty = meta.difficulty;
  payload.tag        = meta.tag;
}
------------------------------------------------

4. ADD test  tests/parseQuestionMeta.test.ts
------------------------------------------------
import { parseQuestionMeta } from "../src/utils/parseQuestionMeta";

test("parseQuestionMeta minimal", () => {
  const json = {
    data: { question: {
      title: "Two Sum",
      titleSlug: "two-sum",
      difficulty: "Easy",
      topicTags: [{ name: "Array" }]
    }}
  };
  const m = parseQuestionMeta(json);
  expect(m).toEqual({
    slug: "two-sum",
    title: "Two Sum",
    difficulty: "Easy",
    tag: "Array"
  });
});
------------------------------------------------

ACCEPTANCE
✓ `pnpm dev` compiles clean.  
✓ Solving a problem logs “meta cached” in background console.  
✓ Unit test passes with `pnpm test`.

RETURN only new/modified files in fenced code blocks plus a `# summary`.
