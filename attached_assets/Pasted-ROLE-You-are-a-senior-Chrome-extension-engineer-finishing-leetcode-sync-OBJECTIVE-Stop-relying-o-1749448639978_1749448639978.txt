ROLE • You are a senior Chrome-extension engineer finishing leetcode-sync.

OBJECTIVE
Stop relying on brittle DOM selectors. Capture every “Accepted” submission
directly from LeetCode’s stable backend API
`https://leetcode.com/api/submission-details/<id>/` and use the DOM only as
a last-ditch fallback.

TASKS
────────────────────────────────────────────────────────
1 Permissions & manifest
   • Ensure manifest.json includes:
        "permissions": [
          "identity", "storage", "activeTab",
          "webRequest", "webRequestBlocking"
        ],
        "host_permissions": [
          "https://leetcode.com/*",
          "https://api.github.com/*"
        ]

2 background.ts — primary capture
   a. Register exactly **one** listener:
      chrome.webRequest.onCompleted.addListener(handler,
        { urls: ["https://leetcode.com/api/submission-details/*"] });
   b. In handler:
      – Ignore responses with statusCode ≠ 200.
      – Extract <id> from URL.
      – `await fetch(details.url, { credentials:"include" })`.
      – Parse JSON:
          title_slug, lang, status_display, code, question__title, 
          question__title_slug, difficulty (present under `question`).
      – If status_display !== "Accepted" → return.
      – Build `SolutionPayload`:
          { slug: PascalCase(question__title_slug),
            title: question__title,
            tag : first element of json.tags || "Uncategorized",
            lang,
            difficulty,
            code,
            submissionId: id,
            capturedAt: new Date().toISOString() }
      – De-duplication: if a pending item with same submissionId already
        exists, exit.
      – Push payload into storage.pending; update stats; set badge.

3 content/leetcode-hook.ts — backup only
   • Keep MutationObserver but:
        – Do nothing unless 5 s have passed since last network capture.
        – When it fires, send message {type:"solved_dom", payload}
          (payload may lack submissionId).
   • background.ts should ignore DOM payload if any network capture
     happened in the last 10 s (simple timestamp check).

4 Type updates
   • Extend SolutionPayload interface with optional submissionId:string.

5 Unit test
   • tests/capture.test.ts
     – Mock webRequest event, feed sample JSON (Accepted).
     – Ensure pending array length increases and payload fields are mapped
       correctly.

6 Logging
   • background.ts: console.info each time a network capture succeeds,
     console.warn when DOM fallback used, console.error on JSON parse fail.

ACCEPTANCE
────────────────────────────────────────────────────────
✓ `pnpm dev` builds with 0 TS / ESLint errors.  
✓ Solving a problem in real LeetCode triggers network capture (check Chrome
  DevTools → background page logs “capture ok”).  
✓ Pending list shows the new item even if LeetCode’s HTML selectors change
  (simulate by removing the modal in DevTools).  
✓ Unit test passes via `pnpm test`.

DELIVERABLE
Return **only** the files you changed or added, each in a fenced
code block, followed by a `# summary` of key modifications.
