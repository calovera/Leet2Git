Errors
[Leet2Git] Cannot extract problem slug from URL: chrome://extensions/
Context
background.js
Stack Trace
background.js:113 (anonymous function)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
// Leet2Git Background Script - API-based Capture
console.log("Leet2Git background script loaded");

let lastNetworkCapture = 0;
let lastDOMCapture = 0;

// Question metadata cache
const questionCache = new Map();

// Helper functions for question metadata
function parseQuestionMeta(res) {
  try {
    const q = res?.data?.question;
    if (!q?.titleSlug) return null;
    return {
      slug: q.titleSlug,
      title: q.title ?? q.titleSlug.replace(/-/g, " "),
      difficulty: q.difficulty ?? "Easy",
      tag: (Array.isArray(q.topicTags) && q.topicTags[0]?.name) || "Uncategorized"
    };
  } catch {
    return null;
  }
}

function cacheQuestionMeta(meta) {
  questionCache.set(meta.slug, meta);
  console.info(`[Leet2Git] Question meta cached: ${meta.slug}`);
}

function getQuestionMeta(slug) {
  return questionCache.get(slug) || null;
}

// Initialize extension
chrome.runtime.onInstalled.addListener(() => {
  console.log("Leet2Git extension installed");
  updateBadge();
});

chrome.runtime.onStartup.addListener(() => {
  updateBadge();
});

// GraphQL listener for question metadata
chrome.webRequest.onCompleted.addListener(async (details) => {
  if (details.method !== "POST" || !details.url.startsWith("https://leetcode.com/graphql")) return;
  if (details.statusCode !== 200) return;

  try {
    const response = await fetch(details.url, {
      credentials: 'include',
      headers: { 'Accept': 'application/json' }
    });
    
    if (!response.ok) return;
    
    const data = await response.json();
    const meta = parseQuestionMeta(data);
    if (meta) {
      cacheQuestionMeta(meta);
    }
  } catch (error) {
    console.error(`[Leet2Git] GraphQL parsing error:`, error);
  }
}, {
  urls: ["https://leetcode.com/graphql*"]
});

// Primary capture method: Intercept LeetCode submission check calls
chrome.webRequest.onCompleted.addListener(async (details) => {
  if (details.statusCode !== 200) return;
  
  // Extract submission ID from check URL
  const urlMatch = details.url.match(/\/submissions\/detail\/(\d+)\/check\//);
  if (!urlMatch) return;
  
  const submissionId = urlMatch[1];
  console.info(`[Leet2Git] Intercepted submission check: ${submissionId}`);
  
  try {
    // Fetch the check response
    const response = await fetch(details.url, {
      credentials: 'include',
      headers: {
        'Accept': 'application/json',
      }
    });
    
    if (!response.ok) {
      console.error(`[Leet2Git] Failed to fetch check response: ${response.status}`);
      return;
    }
    
    const data = await response.json();
    console.info(`[Leet2Git] Check response:`, data);
    
    // Only process accepted submissions
    if (data.status_msg !== "Accepted") {
      console.info(`[Leet2Git] Submission not accepted: ${data.status_msg}`);
      return;
    }
    
    // Extract problem info from current tab URL
    const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
    if (!tabs[0] || !tabs[0].url) {
      console.error(`[Leet2Git] Cannot get current tab URL`);
      return;
    }
    
    const urlParts = tabs[0].url.match(/\/problems\/([^\/]+)/);
    if (!urlParts) {
      console.error(`[Leet2Git] Cannot extract problem slug from URL: ${tabs[0].url}`);
      return;
    }
    
    const problemSlug = urlParts[1];
    const problemTitle = problemSlug.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
    
    // Get the submitted code from submit request (we need to store it temporarily)
    const storedCode = await getStoredSubmissionCode(submissionId);
    
    // Build initial solution payload
    const solutionPayload = {
      submissionId: submissionId,
      slug: toPascalCase(problemSlug),
      title: problemTitle,
      tag: "Uncategorized", // We don't have tags from this endpoint
      lang: data.pretty_lang || data.lang,
      difficulty: "Medium", // Default since we don't have difficulty here
      code: storedCode || "// Code not captured",
      runtime: data.display_runtime + " ms",
      memory: data.status_memory,
      capturedAt: new Date().toISOString(),
      timestamp: Date.now()
    };

    // Replace fields with cached metadata if available
    const meta = getQuestionMeta(problemSlug);
    if (meta) {
      solutionPayload.title = meta.title;
      solutionPayload.difficulty = meta.difficulty;
      solutionPayload.tag = meta.tag;
      console.info(`[Leet2Git] Enhanced with cached metadata: ${meta.title}`);
    }
    
    console.info(`[Leet2Git] Network capture successful:`, solutionPayload);
    
    // Check for duplicates
    const { pending = [] } = await chrome.storage.sync.get("pending");
    const isDuplicate = pending.some(item => item.submissionId === submissionId);
    
    if (isDuplicate) {
      console.info(`[Leet2Git] Duplicate submission ${submissionId}, skipping`);
      return;
    }
    
    // Add to pending solutions
    pending.push(solutionPayload);
    await chrome.storage.sync.set({ pending });
    
    // Update stats
    await updateStats(solutionPayload);
    
    // Update badge
    await updateBadge();
    
    // Mark successful network capture
    lastNetworkCapture = Date.now();
    
    console.info(`[Leet2Git] Successfully captured submission ${submissionId}`);
    
  } catch (error) {
    console.error(`[Leet2Git] Error processing submission ${submissionId}:`, error);
  }
}, {
  urls: ["https://leetcode.com/submissions/detail/*/check/"]
});

// Capture submit requests to store code temporarily
chrome.webRequest.onBeforeRequest.addListener(async (details) => {
  if (details.method !== "POST") return;
  
  try {
    const requestBody = JSON.parse(new TextDecoder().decode(details.requestBody?.raw?.[0]?.bytes));
    if (requestBody?.typed_code && requestBody?.question_id) {
      // Store the code temporarily - we'll match it with the submission ID later
      await chrome.storage.local.set({
        [`temp_code_${requestBody.question_id}`]: {
          code: requestBody.typed_code,
          lang: requestBody.lang,
          timestamp: Date.now()
        }
      });
      console.info(`[Leet2Git] Stored code for question ${requestBody.question_id}`);
    }
  } catch (error) {
    console.error(`[Leet2Git] Error storing submit code:`, error);
  }
}, {
  urls: ["https://leetcode.com/problems/*/submit/"]
}, ["requestBody"]);

// Helper to get stored submission code
async function getStoredSubmissionCode(submissionId) {
  try {
    // We need to match by question - get all temp codes and find the most recent one
    const allStorage = await chrome.storage.local.get();
    const tempCodes = Object.entries(allStorage)
      .filter(([key]) => key.startsWith('temp_code_'))
      .map(([key, value]) => ({ key, ...value }))
      .sort((a, b) => b.timestamp - a.timestamp);
    
    if (tempCodes.length > 0) {
      const mostRecent = tempCodes[0];
      // Clean up old codes (keep only last 5 minutes)
      const fiveMinutesAgo = Date.now() - (5 * 60 * 1000);
      const keysToRemove = tempCodes
        .filter(code => code.timestamp < fiveMinutesAgo)
        .map(code => code.key);
      
      if (keysToRemove.length > 0) {
        await chrome.storage.local.remove(keysToRemove);
      }
      
      return mostRecent.code;
    }
  } catch (error) {
    console.error(`[Leet2Git] Error getting stored code:`, error);
  }
  return null;
}

// Helper function to convert kebab-case to PascalCase
function toPascalCase(str) {
  if (!str) return "";
  return str
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

// Update extension badge
async function updateBadge() {
  try {
    const { pending = [] } = await chrome.storage.sync.get("pending");
    const text = pending.length > 0 ? pending.length.toString() : "";
    chrome.action.setBadgeText({ text });
    chrome.action.setBadgeBackgroundColor({ color: "#4f46e5" });
  } catch (error) {
    console.error("Error updating badge:", error);
  }
}

// Update statistics
async function updateStats(solution) {
  try {
    const { stats = { streak: 0, counts: { easy: 0, medium: 0, hard: 0 }, recentSolves: [] } } = 
          await chrome.storage.sync.get("stats");
    
    // Update difficulty counts
    const difficulty = solution.difficulty.toLowerCase();
    if (stats.counts[difficulty] !== undefined) {
      stats.counts[difficulty]++;
    }
    
    // Add to recent solves
    stats.recentSolves.unshift({
      title: solution.title,
      language: solution.lang,
      difficulty: solution.difficulty,
      timestamp: solution.timestamp
    });
    
    // Keep only 10 recent solves
    stats.recentSolves = stats.recentSolves.slice(0, 10);
    
    await chrome.storage.sync.set({ stats });
  } catch (error) {
    console.error("Error updating stats:", error);
  }
}

// Message handler
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  switch (message.type) {
    case "getHomeData":
      handleGetHomeData(sendResponse);
      return true;
    case "push":
      handlePush(sendResponse);
      return true;
    case "solved_dom":
      handleSolvedFromDOM(message.payload, sendResponse);
      return true;
    default:
      sendResponse({ error: "Unknown message type" });
  }
});

// Handle DOM-based captures (fallback only)
async function handleSolvedFromDOM(payload, sendResponse) {
  try {
    // Only use DOM capture if no network capture happened recently
    const timeSinceNetworkCapture = Date.now() - lastNetworkCapture;
    if (timeSinceNetworkCapture < 10000) { // 10 seconds
      console.warn(`[Leet2Git] Ignoring DOM capture - network capture happened ${timeSinceNetworkCapture}ms ago`);
      sendResponse({ success: false, reason: "network_capture_recent" });
      return;
    }
    
    // Only process if enough time has passed since last DOM capture
    const timeSinceLastDOM = Date.now() - lastDOMCapture;
    if (timeSinceLastDOM < 5000) { // 5 seconds
      console.warn(`[Leet2Git] DOM capture throttled - last capture ${timeSinceLastDOM}ms ago`);
      sendResponse({ success: false, reason: "throttled" });
      return;
    }
    
    console.warn(`[Leet2Git] Using DOM fallback capture`);
    
    // Add missing fields for DOM capture
    const solution = {
      ...payload,
      submissionId: payload.submissionId || `dom-${Date.now()}`,
      tag: payload.tag || "Uncategorized",
      capturedAt: new Date().toISOString(),
      timestamp: payload.timestamp || Date.now()
    };
    
    // Check for duplicates
    const { pending = [] } = await chrome.storage.sync.get("pending");
    const isDuplicate = pending.some(item => 
      item.title === solution.title && 
      item.lang === solution.language &&
      Math.abs(item.timestamp - solution.timestamp) < 60000 // Within 1 minute
    );
    
    if (isDuplicate) {
      console.warn(`[Leet2Git] Duplicate DOM capture detected, skipping`);
      sendResponse({ success: false, reason: "duplicate" });
      return;
    }
    
    // Add to pending
    pending.push(solution);
    await chrome.storage.sync.set({ pending });
    
    // Update stats
    await updateStats(solution);
    
    // Update badge
    await updateBadge();
    
    // Mark DOM capture time
    lastDOMCapture = Date.now();
    
    console.warn(`[Leet2Git] DOM fallback capture successful: ${solution.title}`);
    sendResponse({ success: true });
    
  } catch (error) {
    console.error(`[Leet2Git] DOM capture error:`, error);
    sendResponse({ error: error.message });
  }
}

// Get home data for popup
async function handleGetHomeData(sendResponse) {
  try {
    const [statsResult, pendingResult, authResult, configResult] = await Promise.all([
      chrome.storage.sync.get("stats"),
      chrome.storage.sync.get("pending"), 
      chrome.storage.sync.get("github_auth"),
      chrome.storage.sync.get("repo_config")
    ]);

    const data = {
      stats: statsResult.stats || { streak: 0, counts: { easy: 0, medium: 0, hard: 0 }, recentSolves: [] },
      pending: pendingResult.pending || [],
      auth: authResult.github_auth || { connected: false },
      config: configResult.repo_config || {}
    };

    sendResponse({ success: true, data });
  } catch (error) {
    sendResponse({ error: error.message });
  }
}

// Handle push to GitHub
async function handlePush(sendResponse) {
  try {
    const { github_auth } = await chrome.storage.sync.get("github_auth");
    if (!github_auth || !github_auth.token) {
      sendResponse({ error: "GitHub not connected" });
      return;
    }

    const { repo_config } = await chrome.storage.sync.get("repo_config");
    if (!repo_config || !repo_config.owner || !repo_config.repo) {
      sendResponse({ error: "Repository not configured" });
      return;
    }

    const { pending = [] } = await chrome.storage.sync.get("pending");
    if (pending.length === 0) {
      sendResponse({ error: "No pending solutions" });
      return;
    }

    // For now, simulate success (actual GitHub API integration would go here)
    console.info(`[Leet2Git] Simulating push of ${pending.length} solutions to GitHub`);
    
    // Clear pending solutions
    await chrome.storage.sync.set({ pending: [] });
    await updateBadge();
    
    sendResponse({ 
      success: true, 
      results: pending,
      message: `Successfully pushed ${pending.length} solutions!`
    });
  } catch (error) {
    sendResponse({ error: error.message });
  }
}
[Leet2Git] Cannot extract problem slug from URL: chrome://extensions/?errors=jiholobmfpnnhpkeegllbjclchbkcooc